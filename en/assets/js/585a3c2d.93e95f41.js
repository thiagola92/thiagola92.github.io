"use strict";(self.webpackChunkthiagola_92_github_io=self.webpackChunkthiagola_92_github_io||[]).push([[8370],{93727:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>t,toc:()=>c});var o=n(85893),i=n(11151);const r={authors:"thiagola92",tags:["memory","allocation","free","referecing couting","garbage collector","ownership"]},s="Memory Allocation",t={permalink:"/en/blog/2025/01/07/memory-allocation",editUrl:"https://github.com/thiagola92/thiagola92.github.io/tree/master/blog/2025-01-07-memory-allocation/index.md",source:"@site/blog/2025-01-07-memory-allocation/index.md",title:"Memory Allocation",description:"Aloca\xe7\xe3o de mem\xf3ria se trata de pedir ao sistema operacional por espa\xe7o de mem\xf3ria RAM para utilizarmos durante a execu\xe7\xe3o do nosso programa.",date:"2025-01-07T00:00:00.000Z",formattedDate:"January 7, 2025",tags:[{label:"memory",permalink:"/en/blog/tags/memory"},{label:"allocation",permalink:"/en/blog/tags/allocation"},{label:"free",permalink:"/en/blog/tags/free"},{label:"referecing couting",permalink:"/en/blog/tags/referecing-couting"},{label:"garbage collector",permalink:"/en/blog/tags/garbage-collector"},{label:"ownership",permalink:"/en/blog/tags/ownership"}],hasTruncateMarker:!1,authors:[{name:"Thiago Lages de Alencar",title:"Desenvolvedor de Software",url:"https://github.com/thiagola92",imageURL:"/img/dino.svg",key:"thiagola92"}],frontMatter:{authors:"thiagola92",tags:["memory","allocation","free","referecing couting","garbage collector","ownership"]},unlisted:!1,nextItem:{title:"IPC",permalink:"/en/blog/2024/12/11/IPC"}},l={authorsImageUrls:[void 0]},c=[{value:"Static Allocation",id:"static-allocation",level:2},{value:"Stack Allocation",id:"stack-allocation",level:2},{value:"Explicit Memory Management",id:"explicit-memory-management",level:2},{value:"Garbage Collection",id:"garbage-collection",level:2},{value:"Reference Counting",id:"reference-counting",level:2},{value:"Ownership Model",id:"ownership-model",level:2},{value:"References",id:"references",level:2}];function d(e){const a={a:"a",admonition:"admonition",code:"code",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(a.p,{children:"Aloca\xe7\xe3o de mem\xf3ria se trata de pedir ao sistema operacional por espa\xe7o de mem\xf3ria RAM para utilizarmos durante a execu\xe7\xe3o do nosso programa."}),"\n",(0,o.jsx)(a.admonition,{type:"note",children:(0,o.jsx)(a.p,{children:"N\xe3o confundir com dispositivos de armazenamentos como HDD e SSD, onde nossa intera\xe7\xe3o com eles customa ser por escrita e leitura de arquivos."})}),"\n",(0,o.jsx)(a.h2,{id:"static-allocation",children:"Static Allocation"}),"\n",(0,o.jsx)(a.p,{children:"Se refere a alocar espa\xe7o para todos os dados que j\xe1 se sabe que ser\xe3o necess\xe1rios desdo in\xedcio do seu programa."}),"\n",(0,o.jsx)(a.p,{children:"O espa\xe7o necess\xe1rio \xe9 descoberto durante a compila\xe7\xe3o de um programa e armazenado em conjunto do bin\xe1rio para que j\xe1 seja carregada na mem\xf3ria na inicializa\xe7\xe3o do programa."}),"\n",(0,o.jsx)(a.p,{children:"Compilador ir\xe1 identificar:"}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsx)(a.li,{children:"Literais"}),"\n",(0,o.jsx)(a.li,{children:"Vari\xe1veis est\xe1ticas/globais"}),"\n",(0,o.jsx)(a.li,{children:"C\xf3digo de Fun\xe7\xf5es"}),"\n"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-C",children:'static int executions = 0;\n\nvoid run(int p) {\n    printf("Running");\n    executions += 1;\n}\n\nint main() {\n    run(1);\n    run(5);\n    run(10);\n    return 0;\n}\n'})}),"\n",(0,o.jsxs)(a.p,{children:["Para que seu programe funcione, o compilador consegue identificar que ser\xe1 necess\xe1rio espa\xe7o para o literal ",(0,o.jsx)(a.code,{children:'"Running"'}),", vari\xe1vel est\xe1tica ",(0,o.jsx)(a.code,{children:"executions"})," e o c\xf3digo da fun\xe7\xe3o ",(0,o.jsx)(a.code,{children:"run()"}),"."]}),"\n",(0,o.jsx)(a.p,{children:"A mem\xf3ria alocada \xe9 separada em dois segmentos:"}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:["Data Segment","\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsx)(a.li,{children:"Vari\xe1veis est\xe1ticas"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(a.li,{children:["Text Segment","\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsx)(a.li,{children:"Literais"}),"\n",(0,o.jsx)(a.li,{children:"C\xf3digo de fun\xe7\xf5es"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(a.p,{children:"Data segments funcionam como espa\xe7o de mem\xf3ria normal, onde podem ter seus valores atualizado/modificados."}),"\n",(0,o.jsx)(a.p,{children:"Text segments s\xe3o armazenados uma vez e apenas utilizados para leitura durante a execu\xe7\xe3o do seu programa."}),"\n",(0,o.jsx)(a.hr,{}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Vari\xe1veis est\xe1ticas"})," caem na primeira categoria pois a qualquer momento podemos fazer algo como ",(0,o.jsx)(a.code,{children:"executions += 1"}),"."]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Literais"})," caem na segunda pois sempre precisaremos daquele exato literal quando o c\xf3digo passar por aquela linha de c\xf3digo ",(0,o.jsx)(a.code,{children:'printf("Running")'}),", ent\xe3o n\xe3o queremos que ele seja modificado de maneira nenhuma."]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"C\xf3digo de fun\xe7\xf5es"})," s\xe3o somente leitura pois estamos falando da base para se criar fun\xe7\xf5es conforme o necess\xe1rio. O que eu quero dizer com isto? Toda vez que executarmos uma fun\xe7\xe3o, utilizaremos o c\xf3digo da fun\xe7\xe3o como base para alocar mem\xf3ria para aquela execu\xe7\xe3o da fun\xe7\xe3o!"]}),"\n",(0,o.jsx)(a.p,{children:"Por que n\xe3o fazer com que todas as chamadas da fun\xe7\xf5es utilizem o mesmo espa\xe7o? Cada chamada pode ter comportamento diferente por causa de par\xe2metros ou fatores externos. Isto quer dizer arriscariamos colis\xe3o entre as execu\xe7\xf5es, o que poderia trazer resultados diferentes."}),"\n",(0,o.jsx)(a.p,{children:"Imagine que seu c\xf3digo possue uma fun\xe7\xe3o recursiva, agora voc\xea corre o risco das chamadas a ela mesma alterarem uma vari\xe1vel que era essencial dela."}),"\n",(0,o.jsx)(a.h2,{id:"stack-allocation",children:"Stack Allocation"}),"\n",(0,o.jsx)(a.h2,{id:"explicit-memory-management",children:"Explicit Memory Management"}),"\n",(0,o.jsx)(a.h2,{id:"garbage-collection",children:"Garbage Collection"}),"\n",(0,o.jsx)(a.h2,{id:"reference-counting",children:"Reference Counting"}),"\n",(0,o.jsx)(a.h2,{id:"ownership-model",children:"Ownership Model"}),"\n",(0,o.jsx)(a.h2,{id:"references",children:"References"}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsx)(a.li,{children:(0,o.jsx)(a.a,{href:"https://en.wikipedia.org/wiki/Memory_management",children:"https://en.wikipedia.org/wiki/Memory_management"})}),"\n",(0,o.jsx)(a.li,{children:(0,o.jsx)(a.a,{href:"https://en.wikipedia.org/wiki/Stack-based_memory_allocation",children:"https://en.wikipedia.org/wiki/Stack-based_memory_allocation"})}),"\n",(0,o.jsx)(a.li,{children:(0,o.jsx)(a.a,{href:"https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)",children:"https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)"})}),"\n",(0,o.jsx)(a.li,{children:(0,o.jsx)(a.a,{href:"https://en.wikipedia.org/wiki/Reference_counting",children:"https://en.wikipedia.org/wiki/Reference_counting"})}),"\n"]})]})}function m(e={}){const{wrapper:a}={...(0,i.a)(),...e.components};return a?(0,o.jsx)(a,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},11151:(e,a,n)=>{n.d(a,{Z:()=>t,a:()=>s});var o=n(67294);const i={},r=o.createContext(i);function s(e){const a=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function t(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(r.Provider,{value:a},e.children)}}}]);