"use strict";(self.webpackChunkthiagola_92_github_io=self.webpackChunkthiagola_92_github_io||[]).push([[8753],{20358:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var i=t(85893),a=t(11151);const s={authors:"thiagola92",tags:["bit","byte","bytes","bits"]},r="Little-endian and Big-endian",o={permalink:"/en/blog/2023/11/27/little-and-big-endians",editUrl:"https://github.com/thiagola92/thiagola92.github.io/tree/master/blog/2023-11-27-little-and-big-endians/index.md",source:"@site/blog/2023-11-27-little-and-big-endians/index.md",title:"Little-endian and Big-endian",description:"Defini\xe7\xf5es utilizadas para informar em que ordem os bytes v\xe3o ser escritos na mem\xf3ria.",date:"2023-11-27T00:00:00.000Z",formattedDate:"November 27, 2023",tags:[{label:"bit",permalink:"/en/blog/tags/bit"},{label:"byte",permalink:"/en/blog/tags/byte"},{label:"bytes",permalink:"/en/blog/tags/bytes"},{label:"bits",permalink:"/en/blog/tags/bits"}],hasTruncateMarker:!1,authors:[{name:"Thiago Lages de Alencar",title:"Desenvolvedor de Software",url:"https://github.com/thiagola92",imageURL:"/img/dino.svg",key:"thiagola92"}],frontMatter:{authors:"thiagola92",tags:["bit","byte","bytes","bits"]},unlisted:!1,prevItem:{title:"Forward Kinematics",permalink:"/en/blog/2023/12/18/fk"},nextItem:{title:"Least vs Most significant bit",permalink:"/en/blog/2023/11/27/most-and-least-significant-bit"}},l={authorsImageUrls:[void 0]},d=[];function m(e){const n={br:"br",code:"code",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Defini\xe7\xf5es utilizadas para informar em que ordem os bytes v\xe3o ser escritos na mem\xf3ria."}),"\n",(0,i.jsxs)(n.p,{children:["\xc9 preciso lembrar que a mem\xf3ria tem endere\xe7os, existe in\xedcio e final.",(0,i.jsx)(n.br,{}),"\n","Para o nosso exemplo iremos usar 16 bits (2 bytes):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"| Endere\xe7o da mem\xf3ria |\n| ------------------- |\n| 0                   |\n| 1                   |\n| 2                   |\n| 3                   |\n| 4                   |\n| 5                   |\n| 6                   |\n| 7                   |\n| 8                   |\n| 9                   |\n| 10                  |\n| 11                  |\n| 12                  |\n| 13                  |\n| 14                  |\n| 15                  |\n"})}),"\n",(0,i.jsxs)(n.p,{children:["O computador apenas trabalha com bytes (modifica\xe7\xf5es s\xe3o feitas em bytes, n\xe3o bits).",(0,i.jsx)(n.br,{}),"\n","Ent\xe3o vamos representar uma divis\xe3o entre os bytes."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"| Endere\xe7o da mem\xf3ria |\n| ------------------- |\n| 0                   |\n| 1                   |\n| 2                   |\n| 3                   |\n| 4                   |\n| 5                   |\n| 6                   |\n| 7                   |\n| ------------------- |\n| 8                   |\n| 9                   |\n| 10                  |\n| 11                  |\n| 12                  |\n| 13                  |\n| 14                  |\n| 15                  |\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Se pegarmos um inteiro (unsigned) como 5351, vamos precisar de 2 bytes para armazena-lo (pois seu bin\xe1rio \xe9 ",(0,i.jsx)(n.code,{children:"00010100 11100111"}),").",(0,i.jsx)(n.br,{}),"\n","Existe duas maneiras famosas de se armazenar eles."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Little-endian"}),': Byte menos significativo primeiro ("little end first").',(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Big-endian"}),': Byte mais significativo primeiro ("big end first").']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"| Endere\xe7o da mem\xf3ria | Little-endian | Big-endian |\n| ------------------- | ------------- | ---------- |\n| 0                   | 1             | 0          |\n| 1                   | 1             | 0          |\n| 2                   | 1             | 0          |\n| 3                   | 0             | 1          |\n| 4                   | 0             | 0          |\n| 5                   | 1             | 1          |\n| 6                   | 1             | 0          |\n| 7                   | 1             | 0          |\n| ------------------- | ------------- | ---------- |\n| 8                   | 0             | 1          |\n| 9                   | 0             | 1          |\n| 10                  | 0             | 1          |\n| 11                  | 1             | 0          |\n| 12                  | 0             | 0          |\n| 13                  | 1             | 1          |\n| 14                  | 0             | 1          |\n| 15                  | 0             | 1          |\n"})}),"\n",(0,i.jsx)(n.p,{children:"Note que os bits n\xe3o mudam de ordem, apenas os bytes."})]})}function c(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>r});var i=t(67294);const a={},s=i.createContext(a);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);