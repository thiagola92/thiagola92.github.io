"use strict";(self.webpackChunkthiagola_92_github_io=self.webpackChunkthiagola_92_github_io||[]).push([[8001],{83953:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>t,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var o=n(85893),r=n(11151);const i={authors:"thiagola92",tags:["memory","allocation","free","referecing couting","garbage collector","ownership"]},s="Memory Allocation",c={permalink:"/en/blog/2025/03/13/memory-allocation",editUrl:"https://github.com/thiagola92/thiagola92.github.io/tree/master/blog/2025-03-13-memory-allocation/index.md",source:"@site/blog/2025-03-13-memory-allocation/index.md",title:"Memory Allocation",description:"Aloca\xe7\xe3o de mem\xf3ria se trata de pedir ao sistema operacional por espa\xe7o de mem\xf3ria RAM para utilizarmos durante a execu\xe7\xe3o do nosso programa.",date:"2025-03-13T00:00:00.000Z",formattedDate:"March 13, 2025",tags:[{label:"memory",permalink:"/en/blog/tags/memory"},{label:"allocation",permalink:"/en/blog/tags/allocation"},{label:"free",permalink:"/en/blog/tags/free"},{label:"referecing couting",permalink:"/en/blog/tags/referecing-couting"},{label:"garbage collector",permalink:"/en/blog/tags/garbage-collector"},{label:"ownership",permalink:"/en/blog/tags/ownership"}],hasTruncateMarker:!1,authors:[{name:"Thiago Lages de Alencar",title:"Desenvolvedor de Software",url:"https://github.com/thiagola92",imageURL:"/img/dino.svg",key:"thiagola92"}],frontMatter:{authors:"thiagola92",tags:["memory","allocation","free","referecing couting","garbage collector","ownership"]},unlisted:!1,prevItem:{title:"IPC",permalink:"/en/blog/2025/03/14/IPC"},nextItem:{title:"Bubbletea and Bubbles",permalink:"/en/blog/2024/11/05/bubbles-and-bubbletea"}},t={authorsImageUrls:[void 0]},d=[{value:"Static Allocation",id:"static-allocation",level:2},{value:"Stack Allocation",id:"stack-allocation",level:2},{value:"Explicit Memory Management",id:"explicit-memory-management",level:2},{value:"Garbage Collection",id:"garbage-collection",level:2},{value:"Reference Counting",id:"reference-counting",level:2},{value:"Ownership Model",id:"ownership-model",level:2},{value:"References",id:"references",level:2}];function l(e){const a={a:"a",admonition:"admonition",blockquote:"blockquote",br:"br",code:"code",div:"div",em:"em",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(a.p,{children:"Aloca\xe7\xe3o de mem\xf3ria se trata de pedir ao sistema operacional por espa\xe7o de mem\xf3ria RAM para utilizarmos durante a execu\xe7\xe3o do nosso programa."}),"\n",(0,o.jsx)(a.admonition,{type:"note",children:(0,o.jsx)(a.p,{children:"N\xe3o confundir com dispositivos de armazenamentos como HDD e SSD, onde nossa intera\xe7\xe3o com eles customa ser por escrita e leitura de arquivos."})}),"\n",(0,o.jsx)(a.h2,{id:"static-allocation",children:"Static Allocation"}),"\n",(0,o.jsx)(a.p,{children:"Se refere a alocar espa\xe7o para todos os dados que j\xe1 se sabe que ser\xe3o necess\xe1rios desdo in\xedcio do seu programa."}),"\n",(0,o.jsx)(a.p,{children:"O espa\xe7o necess\xe1rio \xe9 descoberto durante a compila\xe7\xe3o de um programa e armazenado em conjunto do bin\xe1rio para que j\xe1 seja carregada na mem\xf3ria na inicializa\xe7\xe3o do programa."}),"\n",(0,o.jsx)(a.p,{children:"Compilador ir\xe1 identificar:"}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsx)(a.li,{children:"Literais"}),"\n",(0,o.jsx)(a.li,{children:"Vari\xe1veis est\xe1ticas/globais"}),"\n",(0,o.jsx)(a.li,{children:"C\xf3digo de Fun\xe7\xf5es"}),"\n"]}),"\n",(0,o.jsx)(a.p,{children:"Pegando o seguinte c\xf3digo como exemplo:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-C",children:'static int executions = 0;\n\nvoid run(int p) {\n    printf("Running");\n    executions += 1;\n}\n\nint main(void) {\n    run(1);\n    run(5);\n    run(10);\n    return 0;\n}\n'})}),"\n",(0,o.jsxs)(a.p,{children:["Para que seu programe funcione, o compilador consegue identificar que ser\xe1 necess\xe1rio espa\xe7o para o literal ",(0,o.jsx)(a.code,{children:'"Running"'}),", vari\xe1vel est\xe1tica ",(0,o.jsx)(a.code,{children:"executions"})," e o c\xf3digo da fun\xe7\xe3o ",(0,o.jsx)(a.code,{children:"run()"}),"."]}),"\n",(0,o.jsx)(a.p,{children:"A mem\xf3ria alocada \xe9 separada em dois segmentos:"}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:["Data Segment","\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsx)(a.li,{children:"Vari\xe1veis est\xe1ticas"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(a.li,{children:["Text Segment","\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsx)(a.li,{children:"Literais"}),"\n",(0,o.jsx)(a.li,{children:"C\xf3digo de fun\xe7\xf5es"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(a.p,{children:"Data segments funcionam como espa\xe7o de mem\xf3ria normal, onde podem ter seus valores atualizado/modificados."}),"\n",(0,o.jsx)(a.p,{children:"Text segments s\xe3o armazenados uma vez e apenas utilizados para leitura durante a execu\xe7\xe3o do seu programa."}),"\n",(0,o.jsx)(a.hr,{}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Vari\xe1veis est\xe1ticas"})," caem na primeira categoria pois a qualquer momento podemos fazer algo como ",(0,o.jsx)(a.code,{children:"executions += 1"}),"."]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Literais"})," caem na segunda pois sempre precisaremos daquele exato literal quando o c\xf3digo passar por aquela linha de c\xf3digo ",(0,o.jsx)(a.code,{children:'printf("Running")'}),", ent\xe3o n\xe3o queremos que ele seja modificado de maneira nenhuma."]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"C\xf3digo de fun\xe7\xf5es"})," s\xe3o somente leitura pois estamos falando da base para se criar fun\xe7\xf5es conforme o necess\xe1rio. O que eu quero dizer com isto? Toda vez que executarmos uma fun\xe7\xe3o, utilizaremos o c\xf3digo da fun\xe7\xe3o como base para alocar mem\xf3ria para aquela execu\xe7\xe3o da fun\xe7\xe3o!"]}),"\n",(0,o.jsxs)(a.admonition,{type:"info",children:[(0,o.jsxs)(a.blockquote,{children:["\n",(0,o.jsx)(a.p,{children:"Por que n\xe3o fazer com que todas as chamadas da fun\xe7\xf5es utilizem o mesmo espa\xe7o?"}),"\n"]}),(0,o.jsx)(a.p,{children:"Cada chamada pode ter comportamento diferente por causa de par\xe2metros ou fatores externos. Isto quer dizer arriscariamos colis\xe3o entre as execu\xe7\xf5es, o que poderia trazer resultados diferentes."}),(0,o.jsx)(a.p,{children:"Imagine que seu c\xf3digo possue uma fun\xe7\xe3o recursiva, agora voc\xea corre o risco das chamadas a ela mesma alterarem uma vari\xe1vel que era essencial dela."})]}),"\n",(0,o.jsx)(a.h2,{id:"stack-allocation",children:"Stack Allocation"}),"\n",(0,o.jsxs)(a.p,{children:["Se refere a alocar espa\xe7o na ",(0,o.jsx)(a.strong,{children:"Stack"}),"."]}),"\n",(0,o.jsxs)(a.p,{children:["No in\xedcio do programa, um espa\xe7o na mem\xf3ria \xe9 reservado para dados tempor\xe1rios ou curto tempo de vida, este espa\xe7o reservado \xe9 chamado de Stack. Utilizar mais espa\xe7o do que o reservado ir\xe1 causar ",(0,o.jsx)(a.strong,{children:"Stack Overflow"}),"."]}),"\n",(0,o.jsx)(a.p,{children:"Isto \xe9 necess\xe1rio pois nosso c\xf3digo pode se ramificar de diversas maneiras, tornando imposs\xedvel descobrir toda a mem\xf3ria que ser\xe1 utilizada durante a etapa de compila\xe7\xe3o."}),"\n",(0,o.jsx)(a.p,{children:"Pegando o seguinte c\xf3digo como exemplo:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-C",children:"int func1(int a, int b) {\n    return a + b;\n}\n\nint func2(int a, int b) {\n    int x = a * 3;\n    int y = b * 2;\n    return x + y;\n}\n\nint run(int a, int b) {\n    if(a > 10) {\n        return func1();\n    } else {\n        return func2();\n    }\n}\n"})}),"\n",(0,o.jsx)(a.p,{children:"Quando uma fun\xe7\xe3o \xe9 chamada, o programa insere na Stack vari\xe1veis daquela fun\xe7\xe3o."}),"\n",(0,o.jsxs)(a.p,{children:["No caso da ",(0,o.jsx)(a.code,{children:"func1()"}),": ",(0,o.jsx)(a.code,{children:"a"}),", ",(0,o.jsx)(a.code,{children:"b"}),".",(0,o.jsx)(a.br,{}),"\n","No caso da ",(0,o.jsx)(a.code,{children:"func2()"}),": ",(0,o.jsx)(a.code,{children:"a"}),", ",(0,o.jsx)(a.code,{children:"b"}),", ",(0,o.jsx)(a.code,{children:"x"}),", ",(0,o.jsx)(a.code,{children:"y"}),"."]}),"\n",(0,o.jsx)(a.p,{children:"Ao sair da fun\xe7\xe3o, o programa remove esses valores da Stack."}),"\n",(0,o.jsx)(a.p,{children:"\xc9 importante notar que como o espa\xe7o da Stack j\xe1 foi alocada no in\xedcio do programa, inserir e remover da Stack s\xe3o opera\xe7\xf5es r\xe1pidas."}),"\n",(0,o.jsxs)(a.p,{children:["Quando CPUs precisam de dados da mem\xf3ria RAM, elas pegam um bloco de dados de cada vez. O ideal \xe9 que nessa pegada j\xe1 tivesse tudo que a CPU precisaria, para ajudar nisto Stacks seguem o modelo (LIFO, ",(0,o.jsx)(a.em,{children:"last-in, first-out"}),")."]}),"\n",(0,o.jsxs)(a.p,{children:["Pegando a ",(0,o.jsx)(a.code,{children:"func2()"})," como exemplo:"]}),"\n",(0,o.jsxs)(a.table,{children:[(0,o.jsx)(a.thead,{children:(0,o.jsx)(a.tr,{children:(0,o.jsx)(a.th,{children:"Stack"})})}),(0,o.jsxs)(a.tbody,{children:[(0,o.jsx)(a.tr,{children:(0,o.jsx)(a.td,{children:(0,o.jsx)(a.code,{children:"a"})})}),(0,o.jsx)(a.tr,{children:(0,o.jsx)(a.td,{children:(0,o.jsx)(a.code,{children:"b"})})}),(0,o.jsx)(a.tr,{children:(0,o.jsx)(a.td,{children:(0,o.jsx)(a.code,{children:"x"})})}),(0,o.jsx)(a.tr,{children:(0,o.jsx)(a.td,{children:(0,o.jsx)(a.code,{children:"y"})})})]})]}),"\n",(0,o.jsx)(a.p,{children:"Podemos notar que inserimos na stack na ordem em que encontramos as vari\xe1veis, justamente para quando a CPU pegar um bloco de mem\xf3ria a chance de pegar tudo aumentar."}),"\n",(0,o.jsxs)(a.p,{children:["Por outro lado, note que essa arquitetura impede que nossas vari\xe1veis possam crescer de tamanho (",(0,o.jsx)(a.code,{children:"b"})," n\xe3o poderia crescer de tamanho pois o espa\xe7o seguinte j\xe1 est\xe1 reservado por ",(0,o.jsx)(a.code,{children:"x"}),"), por isto os valores inseridos na Stack precisam ter tamanho ",(0,o.jsx)(a.strong,{children:"fixo"}),"."]}),"\n",(0,o.jsx)(a.h2,{id:"explicit-memory-management",children:"Explicit Memory Management"}),"\n",(0,o.jsxs)(a.p,{children:["Se refere a alocar espa\xe7o na ",(0,o.jsx)(a.strong,{children:"Heap"}),"."]}),"\n",(0,o.jsx)(a.p,{children:"Existem casos onde precisamos que a mem\xf3ria possa crescer ou diminuir tamanho, justamente pois n\xe3o temos como saber o quanta mem\xf3ria ser\xe1 necess\xe1ria (e armazenar toda a mem\xf3ria RAM para si mesmo seria rude)."}),"\n",(0,o.jsx)(a.p,{children:"\xc9 importante notar que o sistema operacional \xe9 respons\xe1vel por gerenciar a mem\xf3ria, ent\xe3o precisamos pedir a ele por espa\xe7o de mem\xf3ria RAM para utilizar."}),"\n",(0,o.jsxs)(a.p,{children:["Por exemplo, note como utilizamos a fun\xe7\xe3o ",(0,o.jsx)(a.code,{children:"malloc()"})," para pedir ao sistema operacional por espa\xe7o para 3 inteiros:"]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-C",children:"int run() {\n    int *v = (int*)malloc(sizeof(int) * 3);\n    v[0] = 10;\n    v[1] = 100;\n    v[2] = 1000;\n    free(v);\n\n    return 0;\n}\n"})}),"\n",(0,o.jsx)(a.p,{children:"Fazer uma requisi\xe7\xe3o por N espa\xe7os de mem\xf3ria ao sistema operacional, nos garante N espa\xe7o de mem\xf3ria, ou seja, podemos receber mais espa\xe7o de mem\xf3ria que o necess\xe1rio (estou ignorando o caso onde a mem\xf3ria RAM est\xe1 cheia)."}),"\n",(0,o.jsx)(a.p,{children:"Este comportamento tem como objeto minimizar a quantidade de requisi\xe7\xf5es feitas ao sistema operacional por mem\xf3ria, pois estas requisi\xe7\xf5es custam bastante tempo."}),"\n",(0,o.jsx)(a.p,{children:"Vamos pegar outro exemplo:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-C",children:"int run() {\n    int *v = (int*)malloc(sizeof(int) * 3);\n    v[0] = 10;\n    v[1] = 100;\n    v[2] = 1000;\n    v[3] = 10000; // New line.\n    free(v);\n\n    return 0;\n}\n"})}),"\n",(0,o.jsxs)(a.p,{children:["Existe a chance deste c\xf3digo dar erro e a chance de n\xe3o dar, tudo depende de quanta mem\xf3ria RAM o sistema operacional nos deu. Se ele tiver nos dado exatamente 3, um erro de ",(0,o.jsx)(a.strong,{children:"Segmentation fault"})," vai aparecer pois o sistema operacional n\xe3o nos permite acessar mem\xf3ria RAM que ele n\xe3o nos entregou."]}),"\n",(0,o.jsx)(a.p,{children:"Por outro lado, grande chance de n\xe3o dar erro pois sistema operacional costumam enviar bem mais que o necess\xe1rio. O seguinte c\xf3digo tem bem mais chance de dar erro:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-C",children:"int run() {\n    int *v = (int*)malloc(sizeof(int) * 3);\n    v[0] = 10;\n    v[1] = 100;\n    v[2] = 1000;\n    v[3] = 10000;\n    v[100000] = 100000; // New line.\n    free(v);\n\n    return 0;\n}\n"})}),"\n",(0,o.jsxs)(a.p,{children:["Importante notar que ",(0,o.jsx)(a.code,{children:"v"})," cont\xe9m o endere\xe7o da mem\xf3ria RAM requisitada ao sistema operacional (o endere\xe7o na Heap), por\xe9m o valor de ",(0,o.jsx)(a.code,{children:"v"}),", o endere\xe7o` \xe9 armazenado na Stack pois \xe9 uma espa\xe7o de mem\xf3ria fixo (um endere\xe7o tem um tamanho fixo de mem\xf3ria)."]}),"\n",(0,o.jsxs)(a.p,{children:["O grande problema que aparece com o uso da Heap \xe9 garantir que o seu programa libere a mem\xf3ria obtida, pois \xe9 bem comum de usu\xe1rios da linguagem esquecerem de devolver a mem\xf3ria (",(0,o.jsx)(a.code,{children:"free()"}),")."]}),"\n",(0,o.jsx)(a.p,{children:"Para evitar este tipo de problema, algumas t\xe9cnicas para ger\xeanciar mem\xf3ria foram criados:"}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsx)(a.li,{children:"Garbage Collection"}),"\n",(0,o.jsx)(a.li,{children:"Reference Counting"}),"\n",(0,o.jsx)(a.li,{children:"Ownership Model"}),"\n"]}),"\n",(0,o.jsx)(a.h2,{id:"garbage-collection",children:"Garbage Collection"}),"\n",(0,o.jsxs)(a.p,{children:["\xc9 uma t\xe9cnica onde toda a responsabilidade de alocar e liberar mem\xf3ria (",(0,o.jsx)(a.code,{children:"malloc()"})," e ",(0,o.jsx)(a.code,{children:"free()"}),") \xe9 passada ao ",(0,o.jsx)(a.strong,{children:"Garbage Collector"}),", onde ele deve conseguir detectar que a mem\xf3ria n\xe3o est\xe1 mais sendo usada e libera-la."]}),"\n",(0,o.jsxs)(a.admonition,{type:"info",children:[(0,o.jsxs)(a.p,{children:["A requisi\xe7\xe3o de mem\xf3ria (",(0,o.jsx)(a.code,{children:"malloc()"}),") sempre \xe9 feita pelo usu\xe1rio, mesmo em linguagens que possuem Garbage Collector embutido."]}),(0,o.jsx)(a.p,{children:"Pode n\xe3o ser t\xe3o claro notar estes pedidos de aloca\xe7\xe3o:"}),(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:["Python","\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsx)(a.li,{children:(0,o.jsx)(a.code,{children:"example = []"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(a.li,{children:["GDScript","\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsx)(a.li,{children:(0,o.jsx)(a.code,{children:"var example = []"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(a.li,{children:["Java","\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsx)(a.li,{children:(0,o.jsx)(a.code,{children:"Obj example = new ArrayList<Obj>();"})}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,o.jsx)(a.p,{children:"\xc9 poss\xedvel implementar um Garbage Collector em linguagens que n\xe3o possuem um embutido, por\xe9m por n\xe3o ser embutido, bibliotecas de terceiros podem acabar por n\xe3o utiliza-lo e vazamento de mem\xf3ria pode acontecer de qualquer maneira."}),"\n",(0,o.jsx)(a.admonition,{type:"note",children:(0,o.jsxs)(a.p,{children:["Por exemplo, para a linguagem de programa\xe7\xe3o C podemos encontrar este pequeno projeto:",(0,o.jsx)(a.br,{}),"\n",(0,o.jsx)(a.a,{href:"https://github.com/orangeduck/tgc",children:"https://github.com/orangeduck/tgc"})]})}),"\n",(0,o.jsx)(a.p,{children:"A grande desvantagem desta t\xe9cnica \xe9 que pausas no seu programa precisam ser feitas para que o Garbage Collector tenha tempo de an\xe1lisar mem\xf3rias que n\xe3o est\xe3o mais em uso."}),"\n",(0,o.jsx)(a.h2,{id:"reference-counting",children:"Reference Counting"}),"\n",(0,o.jsxs)(a.p,{children:["Nesta t\xe9cnica, toda aloca\xe7\xe3o de mem\xf3ria inclue um contador para sabermos quantas vezes aquele espa\xe7o alocado est\xe1 sendo referenciado. Quando o contador chega a zero, uma chamada para liberar a mem\xf3ria \xe9 feita (",(0,o.jsx)(a.code,{children:"free()"}),")."]}),"\n",(0,o.jsx)(a.p,{children:"A quantidade de refer\xeancias aumenta a qualquer momento que algu\xe9m aponta para aquele espa\xe7o de mem\xf3ria. Por exemplo:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-GDScript",children:"func _ready() -> void:\n\tvar x = RefCounted.new()\n\tvar y = x\n\tvar z = [x]\n\tprint(x.get_reference_count()) # Three\n\ty = null\n\tz = []\n\tprint(x.get_reference_count()) # One\n"})}),"\n",(0,o.jsx)(a.p,{children:"Cada vez que algu\xe9m refer\xeancia o espa\xe7o de mem\xf3ria alocado por pedido da segunda linha, o contador cresce."}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-GDScript",children:"func _ready() -> void:\n\tvar x = RefCounted.new()\n\tvar y = x\n\tvar z = [x]\n\tprint(x.get_reference_count()) # Three\n\ty = null\n\tz = []\n\tprint(x.get_reference_count()) # One\n"})}),"\n",(0,o.jsx)(a.p,{children:"Cada vez que algu\xe9m para de refer\xeanciar aquele espa\xe7o de mem\xf3ria, o contador desce."}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-GDScript",children:"func _ready() -> void:\n\tvar x = RefCounted.new()\n\tvar y = x\n\tvar z = [x]\n\tprint(x.get_reference_count()) # Three\n\ty = x\n\tx = null\n\tprint(y.get_reference_count()) # One\n\ty = x\n\tx = null\n\tprint(y.get_reference_count()) # One\n"})}),"\n",(0,o.jsxs)(a.p,{children:["\xc9 importante notar que o contador n\xe3o existe com a vari\xe1vel inicial, no caso ",(0,o.jsx)(a.code,{children:"x"}),", ent\xe3o a qualquer momento podemos fazer com que a vari\xe1vel inicial deixe de refer\xeanciar e continuaremos sem problemas de usar aquela mem\xf3ria!"]}),"\n",(0,o.jsxs)(a.p,{children:["O lado negativo \xe9 que a cada refer\xeancia a est\xe1 vari\xe1vel, precisamos aumentar/diminuir o contador. O que pode ser custoso quando tem que se fazer isso para ",(0,o.jsx)(a.strong,{children:"toda"})," mem\xf3ria da Heap."]}),"\n",(0,o.jsx)(a.div,{children:(0,o.jsxs)(a.p,{children:["A t\xe9cnica mais simples de reference counting tamb\xe9m n\xe3o \xe9 bom em lidar com ",(0,o.jsx)(a.strong,{children:"reference cycles"}),". Quando refer\xeancias apontam entre sim, o que faz com que os contadores nunca cheguem a zero."]})}),"\n",(0,o.jsx)(a.h2,{id:"ownership-model",children:"Ownership Model"}),"\n",(0,o.jsx)(a.p,{children:"Diferente das maneiras anteriores onde o programador n\xe3o precisa pensar sobre a libera\xe7\xe3o de mem\xf3ria, neste caso temos que seguir regras que no final ajudam o compilador a determinar quando que a mem\xf3ria deve ser liberada."}),"\n",(0,o.jsx)(a.p,{children:"Como isto \xe9 feito durante a etapa de compila\xe7\xe3o, a execu\xe7\xe3o do seu software n\xe3o sofre perda de desempenho e qualquer erro relacionado ao assunto \xe9 pego durante a compila\xe7\xe3o."}),"\n",(0,o.jsx)(a.p,{children:"A documenta\xe7\xe3o da linguagem Rust deixa claro as regras:"}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsx)(a.li,{children:"Cada valor possue um dono"}),"\n",(0,o.jsx)(a.li,{children:"Valores apenas podem possuir um dono"}),"\n",(0,o.jsx)(a.li,{children:"Quando o dono sai do escopo, o valor \xe9 liberado"}),"\n"]}),"\n",(0,o.jsx)(a.admonition,{type:"info",children:(0,o.jsxs)(a.p,{children:["A primeira regra parece ser apenas uma introdu\xe7\xe3o de que existe o conceito de dono.",(0,o.jsx)(a.br,{}),"\n","A segunda \xe9 para deixar claro que um valor n\xe3o pode ter m\xfaltiplos donos.",(0,o.jsx)(a.br,{}),"\n","A terceira nos deixa claro quando o compilador ir\xe1 adicionar a libera\xe7\xe3o de mem\xf3ria."]})}),"\n",(0,o.jsx)(a.h2,{id:"references",children:"References"}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsx)(a.li,{children:(0,o.jsx)(a.a,{href:"https://en.wikipedia.org/wiki/Memory_management",children:"https://en.wikipedia.org/wiki/Memory_management"})}),"\n",(0,o.jsx)(a.li,{children:(0,o.jsx)(a.a,{href:"https://en.wikipedia.org/wiki/Stack-based_memory_allocation",children:"https://en.wikipedia.org/wiki/Stack-based_memory_allocation"})}),"\n",(0,o.jsx)(a.li,{children:(0,o.jsx)(a.a,{href:"https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)",children:"https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)"})}),"\n",(0,o.jsx)(a.li,{children:(0,o.jsx)(a.a,{href:"https://en.wikipedia.org/wiki/Reference_counting",children:"https://en.wikipedia.org/wiki/Reference_counting"})}),"\n",(0,o.jsx)(a.li,{children:(0,o.jsx)(a.a,{href:"https://www.youtube.com/watch?v=N3o5yHYLviQ",children:"https://www.youtube.com/watch?v=N3o5yHYLviQ"})}),"\n",(0,o.jsx)(a.li,{children:(0,o.jsx)(a.a,{href:"https://www.youtube.com/watch?v=ioJkA7Mw2-U",children:"https://www.youtube.com/watch?v=ioJkA7Mw2-U"})}),"\n",(0,o.jsx)(a.li,{children:(0,o.jsx)(a.a,{href:"https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html",children:"https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html"})}),"\n"]})]})}function m(e={}){const{wrapper:a}={...(0,r.a)(),...e.components};return a?(0,o.jsx)(a,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},11151:(e,a,n)=>{n.d(a,{Z:()=>c,a:()=>s});var o=n(67294);const r={},i=o.createContext(r);function s(e){const a=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function c(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:a},e.children)}}}]);