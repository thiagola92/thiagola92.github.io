"use strict";(self.webpackChunkthiagola_92_github_io=self.webpackChunkthiagola_92_github_io||[]).push([[2370],{269:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>t,metadata:()=>i,toc:()=>l});var s=a(85893),r=a(11151);const t={authors:"thiagola92",tags:["authentication","auth","python","email","mail","password","duckdb","starlette","aiosmtpd"]},o="Authentication - email & password",i={permalink:"/pt-br/blog/2024/05/09/auth-email-password",editUrl:"https://github.com/thiagola92/thiagola92.github.io/tree/master/blog/2024-05-09-auth-email-password/index.md",source:"@site/blog/2024-05-09-auth-email-password/index.md",title:"Authentication - email & password",description:"No post anterior vimos como fazer authentica\xe7\xe3o com usu\xe1rio e senha.",date:"2024-05-09T00:00:00.000Z",formattedDate:"9 de maio de 2024",tags:[{label:"authentication",permalink:"/pt-br/blog/tags/authentication"},{label:"auth",permalink:"/pt-br/blog/tags/auth"},{label:"python",permalink:"/pt-br/blog/tags/python"},{label:"email",permalink:"/pt-br/blog/tags/email"},{label:"mail",permalink:"/pt-br/blog/tags/mail"},{label:"password",permalink:"/pt-br/blog/tags/password"},{label:"duckdb",permalink:"/pt-br/blog/tags/duckdb"},{label:"starlette",permalink:"/pt-br/blog/tags/starlette"},{label:"aiosmtpd",permalink:"/pt-br/blog/tags/aiosmtpd"}],hasTruncateMarker:!1,authors:[{name:"Thiago Lages de Alencar",title:"Desenvolvedor de Software",url:"https://github.com/thiagola92",imageURL:"/img/dino.svg",key:"thiagola92"}],frontMatter:{authors:"thiagola92",tags:["authentication","auth","python","email","mail","password","duckdb","starlette","aiosmtpd"]},unlisted:!1,nextItem:{title:"Authentication - username & password",permalink:"/pt-br/blog/2024/05/08/auth-username-password"}},c={authorsImageUrls:[void 0]},l=[{value:"Questions",id:"questions",level:2},{value:"Email server",id:"email-server",level:2},{value:"Server",id:"server",level:2},{value:"Server - Database Operations",id:"server---database-operations",level:3},{value:"Server - Authentication",id:"server---authentication",level:3},{value:"Server - Main",id:"server---main",level:3},{value:"Client",id:"client",level:2},{value:"Client - Access Content",id:"client---access-content",level:3},{value:"Client - Register User",id:"client---register-user",level:3},{value:"Client - Recover Account",id:"client---recover-account",level:3},{value:"Client - Change Account",id:"client---change-account",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["No post anterior vimos como fazer ",(0,s.jsx)(n.a,{href:"/pt-br/blog/2024/05/08/auth-username-password",children:"authentica\xe7\xe3o com usu\xe1rio e senha"}),".",(0,s.jsx)(n.br,{}),"\n","Agora vamos ver com email e senha, basicamente igual ao outro por\xe9m email \xe9 o identificador da conta."]}),"\n",(0,s.jsx)(n.p,{children:"Precisaremos de um servidor de email para receber email:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://aiosmtpd.aio-libs.org/en/latest/",children:"aiosmtpd"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"No lado do server utilizaremos:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://duckdb.org/",children:"DuckDB"})," como banco de dados"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://www.starlette.io/",children:"Starlette"})," como RESTful API"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"No lado do client utilizaremos:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://www.python-httpx.org/",children:"httpx"})," para fazer requisi\xe7\xf5es"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"questions",children:"Questions"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Qual a vantagem de ter o email como identificador?"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Uma segunda maneira de confirmar autentica\xe7\xe3o."}),"\n",(0,s.jsxs)(n.p,{children:["Para algu\xe9m acessar a conta, ela tem que provar que sabe a senha (vulgo botar a senha na hora de logar).",(0,s.jsx)(n.br,{}),"\n","Agora podemos cobrar que ela prove ser a dona da email (mandamos uma mensagem para o email dela e ela diz para a gente o conte\xfado do email)."]}),"\n",(0,s.jsx)(n.p,{children:"Em outras palavras, se uma pessoa tem a senha e tem acesso ao email que criou a conta, ent\xe3o ela \xe9 a dona da conta."}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Como que falar o conte\xfado do email vai provar algo?"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Vamos dizer que a pessoa pede para mudar a senha da conta."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"N\xf3s mandamos um email com um c\xf3digo especial e aleat\xf3rio para ao email dela"}),"\n",(0,s.jsxs)(n.li,{children:["Ela acessa o email e pega o c\xf3digo (por exemplo: ",(0,s.jsx)(n.code,{children:"982jd8fsj83"}),")"]}),"\n",(0,s.jsx)(n.li,{children:"A pessoa manda o c\xf3digo para o site e a senha nova"}),"\n",(0,s.jsx)(n.li,{children:"N\xf3s conferimos se o c\xf3digo que a pessoa nos mandou era o que esperavamos, se for mudamos a senha"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Essa \xe9 apenas uma maneira de implementar isto, outra maneira mais conhecida \xe9:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Enviamos um email com uma URL do site gerada aleat\xf3riamente"}),"\n",(0,s.jsx)(n.li,{children:"Usu\xe1rio acessa o URL"}),"\n",(0,s.jsxs)(n.li,{children:["Levamos o usu\xe1rio para a \xe1rea de trocar a senha","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Pois a pessoa provou que ela entrou no email e conseguiu o URL \xfanico"}),"\n",(0,s.jsx)(n.li,{children:"Nesse caso podemos tamb\xe9m fazer verifica\xe7\xe3o se ela estava logada na conta que esperava esse URL"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Iremos pela primeira maneira."}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"O que ganhamos com isso?"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:'O famoso bot\xe3o "recupere sua senha".'}),"\n",(0,s.jsx)(n.h2,{id:"email-server",children:"Email server"}),"\n",(0,s.jsx)(n.p,{children:"Para n\xe3o termos que configurar o seu provedor de email ou criar um c\xf3digo onde voc\xea passa credenciais reais do seu provedor, vamos levantar um na pr\xf3pria m\xe1quina."}),"\n",(0,s.jsx)(n.p,{children:"Script para preparar o diret\xf3rio do provedor de email:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"mkdir email_server\ncd email_server\npython3 -m venv venv\n. venv/bin/activate\npip install aiosmtpd\n"})}),"\n",(0,s.jsx)(n.p,{children:"Para ligar o provedor de email:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"python -m aiosmtpd -n\n"})}),"\n",(0,s.jsx)(n.h2,{id:"server",children:"Server"}),"\n",(0,s.jsx)(n.p,{children:"Script para preparar o diret\xf3rio dos exemplos:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"mkdir server\ncd server\npython3 -m venv venv\n. venv/bin/activate\npip install duckdb starlette uvicorn pytz\ntouch main.py auth.py database.py\n"})}),"\n",(0,s.jsx)(n.h3,{id:"server---database-operations",children:"Server - Database Operations"}),"\n",(0,s.jsx)(n.p,{children:"Alteraremos as opera\xe7\xf5es do post anterior para usarem email em vez de usu\xe1rio."}),"\n",(0,s.jsx)(n.p,{children:"E adicionaremos 4 opera\xe7\xf5es ao banco no nosso c\xf3digo:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Criar c\xf3digo de recupera\xe7\xe3o de conta"}),"\n",(0,s.jsxs)(n.li,{children:["Validar o c\xf3digo de recupera\xe7\xe3o","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Isso inclui ver se o usu\xe1rio est\xe1 passando o c\xf3digo dentro de um tempo limite"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Remover c\xf3digo de recupera\xe7\xe3o"}),"\n",(0,s.jsx)(n.li,{children:"Alterar senha"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:'title="database.py"',children:'from datetime import datetime, timedelta\n\nimport duckdb\n\n\ndef setup():\n    cursor = duckdb.connect("users.db")\n\n    cursor.execute("""\n        CREATE SEQUENCE IF NOT EXISTS user_id_sequence START 1\n    """)\n\n    cursor.execute("""\n        CREATE TABLE IF NOT EXISTS users (\n            id      integer     primary key     default nextval(\'user_id_sequence\'),\n            email   text        not null        unique,\n            salt    text        not null,\n            hash    text        not null\n        )\n    """)\n\n    cursor.execute("""\n        CREATE TABLE IF NOT EXISTS recovery_codes (\n            email   text        primary key     not null,\n            code    text        not null,\n            time    timestamp\n        )\n    """)\n\n\ndef get_user_auth(email: str) -> tuple[str, str]:\n    cursor = duckdb.connect("users.db")\n    result = cursor.execute(\n        "SELECT salt, hash FROM users WHERE email = $email",\n        {"email": email},\n    ).fetchone()\n\n    if result:\n        return (result[0], result[1])\n    return ("", "")\n\n\ndef create_user(email: str, salt: str, hash: str) -> bool:\n    cursor = duckdb.connect("users.db")\n    cursor.execute(\n        """\n        INSERT INTO users (email, salt, hash) VALUES\n            ($email, $salt, $hash)\n        """,\n        {"email": email, "salt": salt, "hash": hash},\n    )\n\n\ndef create_recovery_code(email: str, code: str):\n    cursor = duckdb.connect("users.db")\n    cursor.execute(\n        """\n        INSERT INTO recovery_codes (email, code, time) VALUES\n            ($email, $code, current_timestamp)\n        ON CONFLICT (email) DO UPDATE\n            SET code = EXCLUDED.code\n        """,\n        {"email": email, "code": code},\n    )\n\n\ndef is_recovery_code_valid(email: str, code: str) -> bool:\n    cursor = duckdb.connect("users.db")\n    result = cursor.execute(\n        """\n        SELECT email, code, time, current_timestamp\n        FROM recovery_codes\n        WHERE email = $email AND code = $code\n        """,\n        {"email": email, "code": code},\n    ).fetchone()\n\n    if not result:\n        return False\n\n    created: datetime = result[2]\n    now: datetime = result[3]\n    now = now.replace(tzinfo=None)\n    diff: timedelta = created - now\n\n    # V\xe1lido por uma hora\n    if diff.total_seconds() > 3600:\n        return False\n\n    return True\n\n\ndef delete_recovery_code(email: str):\n    cursor = duckdb.connect("users.db")\n    cursor.execute(\n        """\n        DELETE FROM recovery_codes WHERE email = $email\n        """,\n        {"email": email},\n    )\n\n\ndef change_account(email: str, salt: str, hash: str):\n    cursor = duckdb.connect("users.db")\n    cursor.execute(\n        """\n        UPDATE users\n        SET salt = $salt,\n            hash = $hash\n        WHERE email = $email\n        """,\n        {"email": email, "salt": salt, "hash": hash},\n    )\n'})}),"\n",(0,s.jsx)(n.h3,{id:"server---authentication",children:"Server - Authentication"}),"\n",(0,s.jsx)(n.p,{children:"Igual post anterior por\xe9m trocamos usu\xe1rio por email."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:'title="auth.py"',children:'import base64\nimport hashlib\nimport binascii\n\nfrom starlette.authentication import (\n    AuthenticationBackend,\n    AuthenticationError,\n    AuthCredentials,\n    SimpleUser,\n)\nfrom starlette.requests import HTTPConnection\n\nfrom database import get_user_auth\n\n\nclass AuthBackend(AuthenticationBackend):\n    async def authenticate(self, conn: HTTPConnection):\n        # No authroization, no access\n        if "Authorization" not in conn.headers:\n            return\n\n        auth = conn.headers["Authorization"]\n        scheme, credentials = auth.split()\n\n        # Wrong authorization scheme\n        if scheme.lower() != "basic":\n            return\n\n        # Extract email and password from credentials\n        credentials = base64.b64decode(credentials)\n        credentials = credentials.decode()\n        email, _, password = credentials.partition(":")\n\n        # Get real hash from database\n        salt, hash = get_user_auth(email)\n        if not salt or not hash:\n            raise AuthenticationError("Invalid credentails")\n\n        # Generate guess of hash\n        password = password.encode()\n        salt = binascii.a2b_hex(salt)\n        guess = hashlib.scrypt(password, salt=salt, n=2, r=64, p=1)\n        guess = binascii.b2a_hex(guess)\n        guess = guess.decode()\n\n        # Check if the hash guess is the same as real hash\n        if hash != guess:\n            raise AuthenticationError("Wrong password")\n\n        return AuthCredentials(["authenticated"]), SimpleUser(email)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"server---main",children:"Server - Main"}),"\n",(0,s.jsx)(n.p,{children:"Trocamos usu\xe1rio por email e adicionamos dois 2 endpoints novos:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Pedir o c\xf3digo de recupera\xe7\xe3o"}),"\n",(0,s.jsx)(n.li,{children:"Mudar a senha da conta"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:'title="main.py"',children:'import os\nimport hashlib\nimport binascii\nimport secrets\nimport smtplib\nfrom email.message import EmailMessage\n\nfrom starlette.applications import Starlette\nfrom starlette.responses import PlainTextResponse\nfrom starlette.requests import Request\nfrom starlette.routing import Route\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.authentication import AuthenticationMiddleware\nfrom starlette.authentication import requires\n\nimport database\nfrom auth import AuthBackend\n\n\nasync def register(request: Request):\n    # Break down body\n    body = await request.body()\n    body = body.decode()\n    parts = body.split("&")\n    parts = [part.partition("=") for part in parts]\n\n    # Get email and password\n    email = ""\n    password = ""\n    for part in parts:\n        if part[0] == "email":\n            email = part[2]\n        elif part[0] == "password":\n            password = part[2]\n\n    if not email or not password:\n        return PlainTextResponse("Missing email or password", 400)\n\n    # Found user with this email\n    if database.get_user_auth(email)[0]:\n        return PlainTextResponse("User already exist", 403)\n\n    # Create salt and password hash\n    salt = os.urandom(16)\n    password = password.encode()\n    hash = hashlib.scrypt(password, salt=salt, n=2, r=64, p=1)\n    salt = binascii.b2a_hex(salt)\n    hash = binascii.b2a_hex(hash)\n\n    database.create_user(email, salt, hash)\n\n    return PlainTextResponse("User created")\n\n\nasync def recover_account(request: Request):\n    # Get email in body\n    email = await request.body()\n    email = email.decode()\n\n    # Didn\'t find user with this email\n    if not database.get_user_auth(email)[0]:\n        return PlainTextResponse("No account with this email", 403)\n\n    # Create recovery code\n    code = secrets.token_urlsafe(32)\n\n    # Save to database, so we can check it later\n    database.create_recovery_code(email, code)\n\n    # Create email\n    message = EmailMessage()\n    message["Subject"] = "Recover account"\n    message["From"] = "server@localhost"\n    message["To"] = email\n    message["Content"] = code\n\n    # Send email\n    s = smtplib.SMTP("localhost", 8025)\n    s.send_message(message)\n    s.quit()\n\n    return PlainTextResponse("Recovery code sent to your email")\n\n\nasync def change_account(request: Request):\n    # Break down body\n    body = await request.body()\n    body = body.decode()\n    parts = body.split("&")\n    parts = [part.partition("=") for part in parts]\n\n    # Get email, recovery code and new password\n    email = ""\n    code = ""\n    password = ""\n    for part in parts:\n        if part[0] == "email":\n            email = part[2]\n        elif part[0] == "code":\n            code = part[2]\n        elif part[0] == "password":\n            password = part[2]\n\n    if not email or not code or not password:\n        return PlainTextResponse("Missing email/code/password", 400)\n\n    if not database.is_recovery_code_valid(email, code):\n        return PlainTextResponse("Invalid code", 403)\n\n    # Create salt and new password hash\n    salt = os.urandom(16)\n    password = password.encode()\n    hash = hashlib.scrypt(password, salt=salt, n=2, r=64, p=1)\n    salt = binascii.b2a_hex(salt)\n    hash = binascii.b2a_hex(hash)\n\n    # Change password and remove recovery code\n    database.change_account(email, salt, hash)\n    database.delete_recovery_code(email)\n\n    return PlainTextResponse("Password changed")\n\n\n# Needs to be authenticated to receive this response\n@requires("authenticated")\nasync def content(request: Request):\n    return PlainTextResponse("Private content")\n\n\ndatabase.setup()\n\napp = Starlette(\n    debug=True,\n    routes=[\n        Route("/", content),\n        Route("/register", register, methods=["post"]),\n        Route("/recover_account", recover_account, methods=["post"]),\n        Route("/change_account", change_account, methods=["post"]),\n    ],\n    middleware=[Middleware(AuthenticationMiddleware, backend=AuthBackend())],\n)\n'})}),"\n",(0,s.jsx)(n.p,{children:"Agora podemos iniciar o server com:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"uvicorn --reload main:app\n"})}),"\n",(0,s.jsx)(n.h2,{id:"client",children:"Client"}),"\n",(0,s.jsx)(n.p,{children:"Script para preparar o diret\xf3rio dos exemplos:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"mkdir client\ncd client\npython3 -m venv venv\n. venv/bin/activate\npip install httpx\ntouch content.py register.py recover_account.py change_account.py\n"})}),"\n",(0,s.jsx)(n.h3,{id:"client---access-content",children:"Client - Access Content"}),"\n",(0,s.jsx)(n.p,{children:"Mesmo que o post anterior por\xe9m trocando usu\xe1rio por email."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:"title='content.py'",children:'import sys\nimport httpx\nimport base64\n\n# Get username and password from command line\nusername = sys.argv[1]\npassword = sys.argv[2]\n\n# Setup credentials string\ncredentials = f"{username}:{password}"\ncredentials = credentials.encode()\ncredentials = base64.b64encode(credentials)\ncredentials = credentials.decode()\n\n# Get content\nresponse = httpx.get("http://127.0.0.1:8000/", headers={"Authorization": f"Basic {credentials}"})\nprint(response.content)\n'})}),"\n",(0,s.jsx)(n.p,{children:"Execute o c\xf3digo para testar obter o conte\xfado do sistema:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"python content.py username@email.com password\n"})}),"\n",(0,s.jsx)(n.p,{children:"Se voc\xea ainda n\xe3o escreveu o c\xf3digo de registar, isto deve estar proibindo voc\xea de ver o conte\xfado da p\xe1gina."}),"\n",(0,s.jsx)(n.h3,{id:"client---register-user",children:"Client - Register User"}),"\n",(0,s.jsx)(n.p,{children:"Mesmo que o post anterior por\xe9m trocando usu\xe1rio por email."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:"title='register.py'",children:'import sys\nimport httpx\n\n# Get username and password from command line\nemail = sys.argv[1]\npassword = sys.argv[2]\n\n# Setup body string\nbody = f"email={email}&password={password}"\n\n# Register user\nresponse = httpx.post("http://127.0.0.1:8000/register", content=body)\nprint(response.content)\n'})}),"\n",(0,s.jsx)(n.p,{children:"Execute o c\xf3digo para registar seu email e senha:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"python register.py username@email.com password\n"})}),"\n",(0,s.jsx)(n.p,{children:"Agora se executar novamente o c\xf3digo de pegar conte\xfado, deve conseguir ler o conte\xfado da p\xe1gina."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"python content.py username@email.com password\n"})}),"\n",(0,s.jsx)(n.h3,{id:"client---recover-account",children:"Client - Recover Account"}),"\n",(0,s.jsx)(n.p,{children:"Nosso endpoint de requisitar senha s\xf3 precisa do email, ent\xe3o esse c\xf3digo \xe9 o mais curto que veremos."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:"title='recover_account.py'",children:'import sys\nimport httpx\n\n# Get email from command line\nemail = sys.argv[1]\ncontent = f"{email}"\n\n# Request recovery code\nresponse = httpx.post("http://127.0.0.1:8000/recover_account", content=content)\nprint(response.content)\n'})}),"\n",(0,s.jsx)(n.p,{children:"Execute o c\xf3digo para requisitar um email com o c\xf3digo de recupera\xe7\xe3o:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"python recover_account.py username@email.com\n"})}),"\n",(0,s.jsx)(n.p,{children:"Olhe no terminal que est\xe1 executando o server de email, nele voc\xea deve receber um email com o c\xf3digo."}),"\n",(0,s.jsx)(n.h3,{id:"client---change-account",children:"Client - Change Account"}),"\n",(0,s.jsx)(n.p,{children:"Agora podemos cobrar do usu\xe1rio o c\xf3digo de recupera\xe7\xe3o ao mesmo tempo que a nova senha."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:"title='change_account.py'",children:'import sys\nimport httpx\n\n# Get username, code and new password from command line\nemail = sys.argv[1]\ncode = sys.argv[2]\npassword = sys.argv[3]\n\n# Setup body string\nbody = f"email={email}&code={code}&password={password}"\n\n# Change account password\nresponse = httpx.post("http://127.0.0.1:8000/change_account", content=body)\nprint(response.content)\n'})}),"\n",(0,s.jsx)(n.p,{children:"Ap\xf3s receber o c\xf3digo, execute este c\xf3digo para trocar a senha e lembre de informar o c\xf3digo de recupera\xe7\xe3o visto no servidor de email:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"python change_account.py username@email.com fasdfasfasdfasdf new_password\n"})}),"\n",(0,s.jsx)(n.p,{children:"Tente acessar o conte\xfado da p\xe1gina com a senha velha e veja falhar."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"python content.py username@email.com password\n"})}),"\n",(0,s.jsx)(n.p,{children:"Tente acessar o conte\xfado da p\xe1gina com a senha nova e veja o conte\xfado privido."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"python content.py username@email.com new_password\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},11151:(e,n,a)=>{a.d(n,{Z:()=>i,a:()=>o});var s=a(67294);const r={},t=s.createContext(r);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);