"use strict";(self.webpackChunkthiagola_92_github_io=self.webpackChunkthiagola_92_github_io||[]).push([[2007],{85568:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var o=i(85893),r=i(11151);const s={authors:"thiagola92",tags:["ipc","interprocess communication","inter-process communication"]},t="IPC",a={permalink:"/blog/2024/12/11/IPC",editUrl:"https://github.com/thiagola92/thiagola92.github.io/tree/master/blog/2024-12-11-IPC/index.md",source:"@site/blog/2024-12-11-IPC/index.md",title:"IPC",description:"(Interprocess Communication)",date:"2024-12-11T00:00:00.000Z",formattedDate:"11 de dezembro de 2024",tags:[{label:"ipc",permalink:"/blog/tags/ipc"},{label:"interprocess communication",permalink:"/blog/tags/interprocess-communication"},{label:"inter-process communication",permalink:"/blog/tags/inter-process-communication"}],hasTruncateMarker:!1,authors:[{name:"Thiago Lages de Alencar",title:"Desenvolvedor de Software",url:"https://github.com/thiagola92",imageURL:"/img/dino.svg",key:"thiagola92"}],frontMatter:{authors:"thiagola92",tags:["ipc","interprocess communication","inter-process communication"]},unlisted:!1,nextItem:{title:"Bubbletea and Bubbles",permalink:"/blog/2024/11/05/bubbles-and-bubbletea"}},l={authorsImageUrls:[void 0]},c=[{value:"Low Level",id:"low-level",level:2},{value:"File",id:"file",level:3},{value:"File Locking",id:"file-locking",level:3},{value:"Signal",id:"signal",level:3},{value:"Pipe",id:"pipe",level:3},{value:"Message Queue",id:"message-queue",level:3},{value:"Shared Memory",id:"shared-memory",level:3},{value:"Socket",id:"socket",level:3},{value:"High Level",id:"high-level",level:2},{value:"D-Bus",id:"d-bus",level:3},{value:"Remote Procedure Call",id:"remote-procedure-call",level:3},{value:"HTTP API",id:"http-api",level:3},{value:"WebSocket",id:"websocket",level:3},{value:"References",id:"references",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"(Interprocess Communication)"})}),"\n",(0,o.jsx)(n.p,{children:"Existem diversas maneiras de fazer dois processos distintos se comunicarem e isto torna bem dif\xedcil de escolher qual deles utilizar sem antes conhecermos o m\xednimo delas."}),"\n",(0,o.jsx)(n.h2,{id:"low-level",children:"Low Level"}),"\n",(0,o.jsx)(n.h3,{id:"file",children:"File"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:"Escrever os dados em um arquivo e esperar que outro processo leia o arquivo."})}),"\n",(0,o.jsx)(n.p,{children:"Pode ser estranho por ser muito simples mas acontece que passar dados entre processos n\xe3o precisa ser complicado."}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["Inclusive, \xe9 como eu implementei ",(0,o.jsx)(n.a,{href:"https://github.com/thiagola92/Mondot",children:"Mondot"})," (GUI para MongoDB)."]})}),"\n",(0,o.jsx)(n.p,{children:"Exemplo:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Processo 1","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Constantemente verifica se o arquivo possui conte\xfado"}),"\n",(0,o.jsx)(n.li,{children:"Quando notar que possui, exibe o conte\xfado na tela e esvazia o arquivo"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Processo 2","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Constantemente verifica se o arquivo est\xe1 vazio"}),"\n",(0,o.jsx)(n.li,{children:"Quando notar que est\xe1 vazio, escreve conte\xfado no arquivo"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-C",children:'#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint BUFFER_SIZE = 256;\n\nint main(void) {\n  FILE *file = fopen("input.txt", "r+");\n  char *buffer = (char *)malloc(BUFFER_SIZE);\n  int count = 0;\n\n  memset(buffer, 0, BUFFER_SIZE);\n\n  printf("Waiting message\\n");\n\n  do {\n    fseek(file, 0, SEEK_SET);\n    count = fread(buffer, sizeof(char), BUFFER_SIZE, file);\n  } while (count == 0);\n\n  printf("Reading message\\n\\n");\n\n  do {\n    printf("%s", buffer);\n    count = fread(buffer, sizeof(char), BUFFER_SIZE, file);\n\n    if (count < BUFFER_SIZE) {\n      buffer[count] = \'\\0\';\n    }\n\n  } while (count != 0);\n\n  printf("\\n\\nClearing file\\n");\n  freopen("input.txt", "w", file);\n  fclose(file);\n\n  return 0;\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-C",children:'#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint BUFFER_SIZE = 256;\n\nint main(void) {\n  FILE *file = fopen("../process1/input.txt", "w+");\n  char *buffer = (char *)malloc(BUFFER_SIZE);\n  int count = 0;\n\n  memset(buffer, 0, BUFFER_SIZE);\n\n  printf("Waiting file to be empty\\n");\n\n  do {\n    fseek(file, 0, SEEK_SET);\n    count = fread(buffer, sizeof(char), BUFFER_SIZE, file);\n  } while (count != 0);\n\n  printf("Writing message\\n");\n  fprintf(file, "Hello world");\n  fclose(file);\n\n  return 0;\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"Note que neste exemplo eu leio e escrevo no arquivo constantemente, por\xe9m isto \xe9 apenas um exemplo!"}),"\n",(0,o.jsx)(n.p,{children:"A realidade \xe9 que n\xf3s devemos ler ou escrever no arquivo na frequ\xeancia que acharmos necess\xe1rio para nosso programa. S\xf3 quero que voc\xea entenda que este m\xe9todo IPC \xe9 sobre processos usarem arquivos para interagir uns com os outros."}),"\n",(0,o.jsx)(n.h3,{id:"file-locking",children:"File Locking"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsxs)(n.em,{children:["Escrever os dados em um arquivo e esperar que outro processo leia o arquivo ",(0,o.jsx)(n.strong,{children:"por\xe9m respeitando as travas"}),"."]})}),"\n",(0,o.jsx)(n.p,{children:"Um grande problema da maneira anterior \xe9 dois processos interagirem exatamente no mesmo momento com o arquivo."}),"\n",(0,o.jsx)(n.p,{children:"Imagine que um processo comece a ler enquanto um outro n\xe3o terminou de escrever, isso far\xe1 com que ele leia conte\xfado incompleto (parte do conte\xfado). Se n\xe3o tivermos botado garantias para error no nosso c\xf3digo, grandes problemas podem acontecer durante a execu\xe7\xe3o."}),"\n",(0,o.jsx)(n.h3,{id:"signal",children:"Signal"}),"\n",(0,o.jsx)(n.h3,{id:"pipe",children:"Pipe"}),"\n",(0,o.jsx)(n.h3,{id:"message-queue",children:"Message Queue"}),"\n",(0,o.jsx)(n.h3,{id:"shared-memory",children:"Shared Memory"}),"\n",(0,o.jsx)(n.h3,{id:"socket",children:"Socket"}),"\n",(0,o.jsx)(n.h2,{id:"high-level",children:"High Level"}),"\n",(0,o.jsx)(n.h3,{id:"d-bus",children:"D-Bus"}),"\n",(0,o.jsx)(n.h3,{id:"remote-procedure-call",children:"Remote Procedure Call"}),"\n",(0,o.jsx)(n.h3,{id:"http-api",children:"HTTP API"}),"\n",(0,o.jsx)(n.h3,{id:"websocket",children:"WebSocket"}),"\n",(0,o.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://beej.us/guide/bgipc/",children:"https://beej.us/guide/bgipc/"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Inter-process_communication",children:"https://en.wikipedia.org/wiki/Inter-process_communication"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://www.youtube.com/watch?v=Y2mDwW2pMv4",children:"https://www.youtube.com/watch?v=Y2mDwW2pMv4"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>a,a:()=>t});var o=i(67294);const r={},s=o.createContext(r);function t(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);