"use strict";(self.webpackChunkthiagola_92_github_io=self.webpackChunkthiagola_92_github_io||[]).push([[8107],{3905:(t,e,n)=>{n.d(e,{Zo:()=>m,kt:()=>g});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=a.createContext({}),p=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},m=function(t){var e=p(t.components);return a.createElement(s.Provider,{value:e},t.children)},c="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},b=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,s=t.parentName,m=o(t,["components","mdxType","originalType","parentName"]),c=p(n),b=r,g=c["".concat(s,".").concat(b)]||c[b]||u[b]||i;return n?a.createElement(g,l(l({ref:e},m),{},{components:n})):a.createElement(g,l({ref:e},m))}));function g(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,l=new Array(i);l[0]=b;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=t,o[c]="string"==typeof t?t:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},1094:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={authors:"thiagola92-calm",tags:["bit","byte","bytes","bits"]},l="Least vs Most significant bit",o={permalink:"/blog/2023/11/27/most-and-least-significant-bit",editUrl:"https://github.com/thiagola92/thiagola92.github.io/tree/master/blog/2023-11-27-most-and-least-significant-bit/index.md",source:"@site/blog/2023-11-27-most-and-least-significant-bit/index.md",title:"Least vs Most significant bit",description:"O bit mais significativo \xe9 o bit que representa a maior valor do n\xfamero.",date:"2023-11-27T00:00:00.000Z",formattedDate:"November 27, 2023",tags:[{label:"bit",permalink:"/blog/tags/bit"},{label:"byte",permalink:"/blog/tags/byte"},{label:"bytes",permalink:"/blog/tags/bytes"},{label:"bits",permalink:"/blog/tags/bits"}],hasTruncateMarker:!1,authors:[{name:"Thiago Lages de Alencar",title:"Desenvolvedor de Software",url:"https://github.com/thiagola92",imageURL:"https://cdn.discordapp.com/attachments/807746464833863709/1110163174289850378/tiktok.png",key:"thiagola92-calm"}],frontMatter:{authors:"thiagola92-calm",tags:["bit","byte","bytes","bits"]},prevItem:{title:"Little-endian and Big-endian",permalink:"/blog/2023/11/27/little-and-big-endians"},nextItem:{title:"Loading an image is simple",permalink:"/blog/2023/11/09/load-image-simple"}},s={authorsImageUrls:[void 0]},p=[],m={toc:p},c="wrapper";function u(t){let{components:e,...n}=t;return(0,r.kt)(c,(0,a.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"O bit mais significativo \xe9 o bit que representa a maior valor do n\xfamero.",(0,r.kt)("br",{parentName:"p"}),"\n","O bit menos significativo \xe9 o bit que representa o menor valor do n\xfamero.  "),(0,r.kt)("p",null,"O n\xfamero 149 em bin\xe1rio \xe9 ",(0,r.kt)("inlineCode",{parentName:"p"},"10010101"),", cada bit \xe9 respons\xe1vel por representar um n\xfamero.    "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"1"),(0,r.kt)("th",{parentName:"tr",align:null},"0"),(0,r.kt)("th",{parentName:"tr",align:null},"0"),(0,r.kt)("th",{parentName:"tr",align:null},"1"),(0,r.kt)("th",{parentName:"tr",align:null},"0"),(0,r.kt)("th",{parentName:"tr",align:null},"1"),(0,r.kt)("th",{parentName:"tr",align:null},"0"),(0,r.kt)("th",{parentName:"tr",align:null},"1"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"128"),(0,r.kt)("td",{parentName:"tr",align:null},"64"),(0,r.kt)("td",{parentName:"tr",align:null},"32"),(0,r.kt)("td",{parentName:"tr",align:null},"16"),(0,r.kt)("td",{parentName:"tr",align:null},"8"),(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"1")))),(0,r.kt)("p",null,"N\xf3s sabemos que isto \xe9 equivalente a 149 pois somando o valor de todos os bits que s\xe3o 1 obtemos 149.  "),(0,r.kt)("p",null,"128 + 16 + 4 + 1 = 149"))}u.isMDXComponent=!0}}]);