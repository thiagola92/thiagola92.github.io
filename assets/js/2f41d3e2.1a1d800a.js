"use strict";(self.webpackChunkthiagola_92_github_io=self.webpackChunkthiagola_92_github_io||[]).push([[9805],{90527:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>t});var o=i(85893),s=i(11151);const r={authors:"thiagola92",tags:["lock","c","file","process"]},l="Lock Files in Process",a={permalink:"/blog/2024/07/15/lock-file-process",editUrl:"https://github.com/thiagola92/thiagola92.github.io/tree/master/blog/2024-07-15-lock-file-process/index.md",source:"@site/blog/2024-07-15-lock-file-process/index.md",title:"Lock Files in Process",description:"Quando voc\xea quer ler o arquivo, voc\xea pede ao sistema operacional pelo conte\xfado do arquivo.",date:"2024-07-15T00:00:00.000Z",formattedDate:"July 15, 2024",tags:[{label:"lock",permalink:"/blog/tags/lock"},{label:"c",permalink:"/blog/tags/c"},{label:"file",permalink:"/blog/tags/file"},{label:"process",permalink:"/blog/tags/process"}],hasTruncateMarker:!1,authors:[{name:"Thiago Lages de Alencar",title:"Desenvolvedor de Software",url:"https://github.com/thiagola92",imageURL:"/img/dino.svg",key:"thiagola92"}],frontMatter:{authors:"thiagola92",tags:["lock","c","file","process"]},unlisted:!1,nextItem:{title:"game-stream-industry",permalink:"/blog/2024/06/22/game-stream-industry"}},c={authorsImageUrls:[void 0]},t=[{value:"Process",id:"process",level:2},{value:"Problem",id:"problem",level:2},{value:"Locks",id:"locks",level:2},{value:"References",id:"references",level:2}];function d(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Quando voc\xea quer ler o arquivo, voc\xea pede ao sistema operacional pelo conte\xfado do arquivo."}),"\n",(0,o.jsx)(n.p,{children:"Quando voc\xea quer escrever no arquivo, voc\xea pede ao sistema operacional para inserir o conte\xfado no arquivo."}),"\n",(0,o.jsx)(n.p,{children:"\xc9 importante saber que o sistema operacional toma diversos cuidados para que desenvolvedores n\xe3o acessem diretamente o hardware, ou seja, por baixo dos panos voc\xea est\xe1 pedindo para o sistema operacional ler/escrever."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["C","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"fgets()"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"fwrite()"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Python","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"file.read()"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"file.write()"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Rust","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"file.read_to_string()"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"file.write_all()"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Go","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"os.ReadFile()"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"os.WriteFile()"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Veremos como garantir a seguran\xe7a de um arquivo quando se tem m\xfaltiplos processos querendo altera-lo."}),"\n",(0,o.jsx)(n.h2,{id:"process",children:"Process"}),"\n",(0,o.jsxs)(n.p,{children:["A fun\xe7\xe3o utilizada para se criar processos \xe9 ",(0,o.jsx)(n.code,{children:"fork()"}),", est\xe1 fun\xe7\xe3o faz com que o atual processo crie um processo filho quase id\xeantico e executando o mesmo c\xf3digo que o pai."]}),"\n",(0,o.jsx)(n.p,{children:'Olhe este c\xf3digo que printa duas vezes "Hi":'}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-C",children:'#include <stdio.h>\n#include <unistd.h>\n\nint main() {\n    fork();\n    printf("Hi\\n");\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Se voc\xea executa-lo ir\xe1 notar que o filho \xe9 t\xe3o igual ao pai que ele continua exatamente do mesmo local que o pai se encontrava (logo ap\xf3s ",(0,o.jsx)(n.code,{children:"fork()"})," retornar um valor). Se tivessemos vari\xe1veis, poderiamos ver que at\xe9 o valor delas s\xe3o id\xeanticos ao do pai."]}),"\n",(0,o.jsxs)(n.p,{children:["No entanto, precisamos de uma maneira de reconhecer quem \xe9 o pai e filho, caso contr\xe1rio este c\xf3digo execut\xe1ria exatamente a mesma coisa para ambos (n\xe3o seria nada produtivo). Acontece que a fun\xe7\xe3o ",(0,o.jsx)(n.code,{children:"fork()"})," retorna um valor e este valor \xe9 utilizado para sabermos se estamos no pai ou no filho."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-C",children:'#include <stdio.h>\n#include <unistd.h>\n\nint main() {\n  int pid = fork();\n\n  if (pid == -1) {\n    printf("Failed to create child process\\n");\n  } else if (pid == 0) {\n    printf("I\'m the child process\\n");\n  } else {\n    printf("I\'m the parent process\\n");\n  }\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["A fun\xe7\xe3o ",(0,o.jsx)(n.code,{children:"fork()"})," vai retornar ao pai o PID do filho (ou -1 em caso de error).",(0,o.jsx)(n.br,{}),"\n","A fun\xe7\xe3o ",(0,o.jsx)(n.code,{children:"fork()"})," vai retornar ao filho zero."]}),"\n",(0,o.jsxs)(n.admonition,{type:"tip",children:[(0,o.jsx)(n.p,{children:"Normalmente o c\xf3digo do pai e filho s\xe3o inseridos em fun\xe7\xf5es em vez de deixar tudo dentro de um if/else."}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-C",children:"if(pid == 0) {\n  child_code();\n} else {\n  parent_code();\n}\n"})}),(0,o.jsxs)(n.p,{children:["Ou se utiliza fun\xe7\xf5es ",(0,o.jsx)(n.code,{children:"exec"})," para transformar completamente o c\xf3digo executado naquele processo."]})]}),"\n",(0,o.jsx)(n.h2,{id:"problem",children:"Problem"}),"\n",(0,o.jsx)(n.p,{children:"Quando dois processos interagem com o mesmo arquivo, pode acontecer da informa\xe7\xe3o ser preenchida incorretamente? Afinal, precisamos primeiramente descobrir se isso \xe9 poss\xedvel ou n\xe3o de acontecer."}),"\n",(0,o.jsx)(n.p,{children:"Como o escalonamento pode ser imprevisivel, uma maneira de testar se durante a intera\xe7\xe3o com um arquivo houve troca de processo \xe9 repetindo a a\xe7\xe3o diversas vezes e ver se pelo menos uma vez ocorreu."}),"\n",(0,o.jsx)(n.p,{children:"O seguinte c\xf3digo ir\xe1 ser executado para o processo pai e filho:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-C",children:'int count = 0;\nFILE* file = fopen("example.txt", "w+");\n\nwhile(count < 10000) {\n    int i;\n    \n    fscanf(file, "%d", &i);\n    fseek(file, 0, SEEK_SET);\n    fprintf(file, "%d     ", ++i);\n    \n    count++;\n}\n\nfclose(file);\n'})}),"\n",(0,o.jsx)(n.p,{children:"O c\xf3digo ir\xe1 ler o atual n\xfamero do arquivo, mover o ponteiro para o in\xedcio do arquivo e sobreescrever o n\xfamero."}),"\n",(0,o.jsxs)(n.admonition,{type:"note",children:[(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-C",children:'fprintf(file, "%d     ", ++i);\n'})}),(0,o.jsx)(n.p,{children:"Por que inserir espa\xe7o ap\xf3s o n\xfamero? Foi uma maneira de evitar que o n\xfamero de ambos processos se misturem."}),(0,o.jsx)(n.p,{children:'Por exemplo: Processo 1 escreve 5000 e processo 2 escreve 9, o arquivo ir\xe1 conter "9000" pois o 9 foi escrito em cima do 5.'})]}),"\n",(0,o.jsx)(n.p,{children:"Agora s\xf3 precisamos adicionar a l\xf3gica de criar processo vista anteriormente:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-C",children:'#include <stdio.h>\n#include <unistd.h>\n\nvoid code() {\n  int count = 0;\n  FILE* file = fopen("example.txt", "w+");\n  \n  while(count < 10000) {\n    int i;\n    \n    fscanf(file, "%d", &i);\n    fseek(file, 0, SEEK_SET);\n    fprintf(file, "%d     ", ++i);\n    \n    count++;\n  }\n  \n  fclose(file);\n}\n\nint main() {\n  FILE* file = fopen("example.txt", "w");\n  fputc(\'0\', file);\n  fclose(file);\n  \n  int pid = fork();\n\n  if (pid == -1) {\n    printf("Failed to create child process\\n");\n  } else if (pid == 0) {\n    code();\n    printf("Child finished\\n");\n  } else {\n    code();\n    printf("Parent finished\\n");\n  }\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Quando executei este c\xf3digo para 10 itera\xe7\xf5es, o valor final do arquivo foi 20.",(0,o.jsx)(n.br,{}),"\n","Quando executei este c\xf3digo para 1000 itera\xe7\xf5es, o valor final do arquivo foi 1000.",(0,o.jsx)(n.br,{}),"\n","Quando executei este c\xf3digo para 10000 itera\xe7\xf5es, o valor final do arquivo foi 10015."]}),"\n",(0,o.jsx)(n.p,{children:"O que somos capaz de deduzir com isto?"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"O resultado \xe9 imprevis\xedvel pois n\xe3o temos controle de quando o escalonador vai trocar os processos"}),"\n",(0,o.jsx)(n.li,{children:"Dependendo do volume de itera\xe7\xf5es e da m\xe1quina do usu\xe1rio, um processo pode ou n\xe3o conseguir fazer a tarefa antes do escalonador trocar o processo"}),"\n",(0,o.jsx)(n.li,{children:"Se houver troca durante uma tarefa, pode corromper o resultado do arquivo"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Quais as chances disto acontecer? Depende do software, pois existem arquivos que a chance de dois softwares interagirem ao mesmo tempo \xe9 0%."}),"\n",(0,o.jsx)(n.h2,{id:"locks",children:"Locks"}),"\n",(0,o.jsx)(n.p,{children:"Acontece que existe mais de uma maneira de aplicar locks no Linux."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://man7.org/linux/man-pages/man2/flock.2.html",children:"flock"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"f"}),"ile ",(0,o.jsx)(n.strong,{children:"lock"})]}),"\n",(0,o.jsx)(n.li,{children:"BSD"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://man7.org/linux/man-pages/man3/lockf.3.html",children:"lockf"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"lock"})," ",(0,o.jsx)(n.strong,{children:"f"}),"ile"]}),"\n",(0,o.jsx)(n.li,{children:"POSIX"}),"\n",(0,o.jsxs)(n.li,{children:["\xc9 uma vers\xe3o simplificada do ",(0,o.jsx)(n.em,{children:'fcntl "Advisory record locking"'})]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://man7.org/linux/man-pages/man2/fcntl.2.html",children:'fcntl "Advisory record locking"'}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"f"}),"ile ",(0,o.jsx)(n.strong,{children:"c"}),"o",(0,o.jsx)(n.strong,{children:"nt"}),"ro",(0,o.jsx)(n.strong,{children:"l"})]}),"\n",(0,o.jsx)(n.li,{children:"POSIX"}),"\n",(0,o.jsx)(n.li,{children:"Uma fun\xe7\xe3o capaz de fazer diversas opera\xe7\xf5es sobre file descriptors (uma delas sendo locks)"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://man7.org/linux/man-pages/man2/fcntl.2.html",children:'fcntl "Open file description locks (non-POSIX)"'}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"f"}),"ile ",(0,o.jsx)(n.strong,{children:"c"}),"o",(0,o.jsx)(n.strong,{children:"nt"}),"ro",(0,o.jsx)(n.strong,{children:"l"})]}),"\n",(0,o.jsxs)(n.li,{children:["Linux specific","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Existem propostas para se adicionado ao padr\xf5es POSIX"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:"Uma fun\xe7\xe3o capaz de fazer diversas opera\xe7\xf5es sobre file descriptors (uma delas sendo este outro tipo de locks)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-C",metastring:'title="flock"',children:'#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/file.h>\n#include <unistd.h>\n\n#define BUFFER_SIZE 256\n\nvoid code() {\n  int count = 0;\n  char *buffer = malloc(sizeof(char) * BUFFER_SIZE);\n  int fd = open("example.txt", O_RDWR);\n\n  while (count < 10000) {\n    int i;\n\n    flock(fd, LOCK_EX);\n    lseek(fd, 0, SEEK_SET);\n    read(fd, buffer, BUFFER_SIZE);\n    i = atoi(buffer) + 1;\n    sprintf(buffer, "%d     ", i);\n    lseek(fd, 0, SEEK_SET);\n    write(fd, buffer, strlen(buffer));\n    flock(fd, LOCK_UN);\n\n    count++;\n  }\n\n  close(fd);\n}\n\nint main() {\n  FILE *file = fopen("example.txt", "w");\n  fputc(\'0\', file);\n  fclose(file);\n\n  int pid = fork();\n\n  if (pid == -1) {\n    printf("Failed to create child process\\n");\n  } else if (pid == 0) {\n    code();\n    printf("Child finished\\n");\n  } else {\n    code();\n    printf("Parent finished\\n");\n  }\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-C",metastring:'title="lockf"',children:'#include <fcntl.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n\n#define BUFFER_SIZE 256\n\nvoid code() {\n  int count = 0;\n  char *buffer = malloc(sizeof(char) * BUFFER_SIZE);\n  int fd = open("example.txt", O_RDWR);\n\n  while (count < 10000) {\n    int i;\n\n    lockf(fd, F_LOCK, 0);\n    read(fd, buffer, BUFFER_SIZE);\n    i = atoi(buffer) + 1;\n    sprintf(buffer, "%d     ", i);\n    lseek(fd, 0, SEEK_SET);\n    write(fd, buffer, strlen(buffer));\n    lockf(fd, F_ULOCK, 0);\n\n    count++;\n  }\n\n  close(fd);\n}\n\nint main() {\n  FILE *file = fopen("example.txt", "w");\n  fputc(\'0\', file);\n  fclose(file);\n\n  int pid = fork();\n\n  if (pid == -1) {\n    printf("Failed to create child process\\n");\n  } else if (pid == 0) {\n    code();\n    printf("Child finished\\n");\n  } else {\n    code();\n    printf("Parent finished\\n");\n  }\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-C",metastring:'title="fcntl - Advisory record locking"',children:'#include <fcntl.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n\n#define BUFFER_SIZE 256\n\nvoid code() {\n  int count = 0;\n  struct flock fl;\n  char *buffer = malloc(sizeof(char) * BUFFER_SIZE);\n  int fd = open("example.txt", O_RDWR);\n\n  fl.l_whence = SEEK_SET;\n  fl.l_start = 0;\n  fl.l_len = 0;\n\n  while (count < 10000) {\n    int i;\n\n    fl.l_type = F_WRLCK;\n    fcntl(fd, F_SETLKW, &fl);\n    lseek(fd, 0, SEEK_SET);\n    read(fd, buffer, BUFFER_SIZE);\n    i = atoi(buffer) + 1;\n    sprintf(buffer, "%d     ", i);\n    lseek(fd, 0, SEEK_SET);\n    write(fd, buffer, strlen(buffer));\n    fl.l_type = F_UNLCK;\n    fcntl(fd, F_SETLKW, &fl);\n\n    count++;\n  }\n\n  close(fd);\n}\n\nint main() {\n  FILE *file = fopen("example.txt", "w");\n  fputc(\'0\', file);\n  fclose(file);\n\n  int pid = fork();\n\n  if (pid == -1) {\n    printf("Failed to create child process\\n");\n  } else if (pid == 0) {\n    code();\n    printf("Child finished\\n");\n  } else {\n    code();\n    printf("Parent finished\\n");\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://www.youtube.com/watch?v=ioJkA7Mw2-U",children:"https://www.youtube.com/watch?v=ioJkA7Mw2-U"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"O importante do video \xe9 o in\xedcio que explica como chamadas ao sistema s\xe3o feitas"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://man7.org/linux/man-pages/man3/lockf.3.html",children:"https://man7.org/linux/man-pages/man3/lockf.3.html"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://man7.org/linux/man-pages/man2/flock.2.html",children:"https://man7.org/linux/man-pages/man2/flock.2.html"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://man7.org/linux/man-pages/man2/fcntl.2.html",children:"https://man7.org/linux/man-pages/man2/fcntl.2.html"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://man7.org/linux/man-pages/man3/flockfile.3.html",children:"https://man7.org/linux/man-pages/man3/flockfile.3.html"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://man7.org/linux/man-pages/man3/fdopen.3.html",children:"https://man7.org/linux/man-pages/man3/fdopen.3.html"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Unistd.h",children:"https://en.wikipedia.org/wiki/Unistd.h"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/C_standard_library",children:"https://en.wikipedia.org/wiki/C_standard_library"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/C_file_input/output",children:"https://en.wikipedia.org/wiki/C_file_input/output"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/File_descriptor",children:"https://en.wikipedia.org/wiki/File_descriptor"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/File_locking",children:"https://en.wikipedia.org/wiki/File_locking"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://gavv.net/articles/file-locks/",children:"https://gavv.net/articles/file-locks/"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>a,a:()=>l});var o=i(67294);const s={},r=o.createContext(s);function l(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);