"use strict";(self.webpackChunkthiagola_92_github_io=self.webpackChunkthiagola_92_github_io||[]).push([[8875],{14424:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=t(85893),a=t(11151);const o={authors:"thiagola92-calm",tags:["enum","rust","union"]},i="Unions e Enums",s={permalink:"/blog/2023/12/31/union-enum",editUrl:"https://github.com/thiagola92/thiagola92.github.io/tree/master/blog/2023-12-31-union-enum/index.md",source:"@site/blog/2023-12-31-union-enum/index.md",title:"Unions e Enums",description:"Ao come\xe7ar a estudar Rust percebi o qu\xe3o a rela\xe7\xe3o deste dois s\xe3o pr\xf3xima, por\xe9m primeiro precisamos rever unions e enums.",date:"2023-12-31T00:00:00.000Z",formattedDate:"December 31, 2023",tags:[{label:"enum",permalink:"/blog/tags/enum"},{label:"rust",permalink:"/blog/tags/rust"},{label:"union",permalink:"/blog/tags/union"}],hasTruncateMarker:!1,authors:[{name:"Thiago Lages de Alencar",title:"Desenvolvedor de Software",url:"https://github.com/thiagola92",imageURL:"https://cdn.discordapp.com/attachments/807746464833863709/1110163174289850378/tiktok.png",key:"thiagola92-calm"}],frontMatter:{authors:"thiagola92-calm",tags:["enum","rust","union"]},unlisted:!1,prevItem:{title:"Inverse Kinematics Look At",permalink:"/blog/2024/01/03/ik-look-at"},nextItem:{title:"Forward Kinematics",permalink:"/blog/2023/12/18/fk"}},c={authorsImageUrls:[void 0]},l=[{value:"C",id:"c",level:3},{value:"Rust",id:"rust",level:3}];function d(n){const e={a:"a",code:"code",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.p,{children:"Ao come\xe7ar a estudar Rust percebi o qu\xe3o a rela\xe7\xe3o deste dois s\xe3o pr\xf3xima, por\xe9m primeiro precisamos rever unions e enums."}),"\n",(0,r.jsx)(e.h1,{id:"union",children:"Union"}),"\n",(0,r.jsx)(e.p,{children:"Se trata de utilizar o mesmo espa\xe7o de mem\xf3ria para armazenar um entre diversos tipos."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C",children:"union Content {\n    int i;\n    float f;\n    char c;\n};\n\nunion Content content;\n"})}),"\n",(0,r.jsx)(e.p,{children:"Nesse exemplo eu declarei um union que pode conter um dos seguintes valores: int, float, char."}),"\n",(0,r.jsx)(e.p,{children:"Ent\xe3o eu posso escrever qualquer um dos tipos nele:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C",children:"content.i = 10;\ncontent.f = 5.0;\ncontent.c = 'a';\n"})}),"\n",(0,r.jsxs)(e.p,{children:["O valor final de ",(0,r.jsx)(e.code,{children:"content"})," vai ser ",(0,r.jsx)(e.code,{children:"a"})," pois foi o \xfaltimo valor que botamos."]}),"\n",(0,r.jsx)(e.p,{children:"Por\xe9m a parte importante \xe9 justamente o fato de usarmos o mesmo espa\xe7o de mem\xf3ria para armazenar qualquer um destes tipos."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C",children:'content.c = \'a\';\n\nprintf("%c\\n", content.c); // print "a"\nprintf("%c\\n", content.i); // print "a"\n'})}),"\n",(0,r.jsx)(e.p,{children:"Quando voc\xea declara uma union, o tamanho dela \xe9 definido pelo maior tamanho entre os tipos que ela precisa conseguir armazenar."}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Tipo"}),(0,r.jsx)(e.th,{children:"Tamanho"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"int"}),(0,r.jsx)(e.td,{children:"4 bytes"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"float"}),(0,r.jsx)(e.td,{children:"4 bytes"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"char"}),(0,r.jsx)(e.td,{children:"1 byte"})]})]})]}),"\n",(0,r.jsxs)(e.p,{children:["No nosso caso o melhor tamanho seria 4 bytes, pois com ele voc\xea consegue armazenar o ",(0,r.jsx)(e.code,{children:"char"})," tamb\xe9m."]}),"\n",(0,r.jsxs)(e.p,{children:["Nada impede de armazenarmos um ",(0,r.jsx)(e.code,{children:"char"})," e tentarmos ler aquele espa\xe7o da mem\xf3ria como um ",(0,r.jsx)(e.code,{children:"int"}),"."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C",children:'content.c = \'a\';\n\nprintf("%c\\n", content.c); // print "a"\nprintf("%c\\n", content.i); // print "a"\n\n// O character \'a\' \xe9 nada mais que o n\xfamero 97 na mem\xf3ria.\nprintf("%i\\n", content.c); // print "97"\nprintf("%i\\n", content.i); // print "97"\n'})}),"\n",(0,r.jsx)(e.p,{children:"Resta a n\xf3s utilizar corretamente o valor daquele espa\xe7o de mem\xf3ria."}),"\n",(0,r.jsxs)(e.p,{children:["Afinal n\xe3o queremos armazenar um ",(0,r.jsx)(e.code,{children:"char"})," na union e mais tarde no c\xf3digo tentar utilizar como um ",(0,r.jsx)(e.code,{children:"int"}),", n\xe9?"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C",children:'content.c = \'a\';\n\n// ...\n\nprintf("%i\\n", content.i + 5); // print "102"\n'})}),"\n",(0,r.jsx)(e.p,{children:"N\xe3o s\xf3 isso como quando voc\xea armazena um valor naquele espa\xe7o de mem\xf3ria, ele apenas escreve no espa\xe7o que ele usaria."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C",children:'content.c = \'a\';\n\nprintf("%i\\n", content.c); // print "97"\nprintf("%i\\n", content.i); // print "97"\n\ncontent.i = -10;\ncontent.c = \'a\';\n\nprintf("%i\\n", content.c); // print "97"\nprintf("%i\\n", content.i); // print "-159"\n'})}),"\n",(0,r.jsx)(e.p,{children:"O que aconteceu aqui?"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["In\xedcio do programa os ",(0,r.jsx)(e.strong,{children:"4"})," bytes de ",(0,r.jsx)(e.code,{children:"content"})," est\xe3o com zero"]}),"\n",(0,r.jsxs)(e.li,{children:["Content recebeu no ",(0,r.jsx)(e.strong,{children:"primeiro"})," byte o valor 97 (pois ",(0,r.jsx)(e.code,{children:"a"})," == 97)"]}),"\n",(0,r.jsxs)(e.li,{children:["Printamos utilizando ",(0,r.jsx)(e.code,{children:"content.c"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Isto nos faz utilizar ",(0,r.jsx)(e.strong,{children:"um"})," byte"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["Printamos utilizando ",(0,r.jsx)(e.code,{children:"content.i"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Isto nos faz utilizar ",(0,r.jsx)(e.strong,{children:"4"})," bytes"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["Content recebeu encheu os ",(0,r.jsx)(e.strong,{children:"4"})," bytes para formar o valor de -10"]}),"\n",(0,r.jsxs)(e.li,{children:["Content recebeu no ",(0,r.jsx)(e.strong,{children:"primeiro"})," byte o valor 97"]}),"\n",(0,r.jsxs)(e.li,{children:["Printamos utilizando ",(0,r.jsx)(e.code,{children:"content.c"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Isto nos faz utilizar ",(0,r.jsx)(e.strong,{children:"um"})," byte (primeiro byte est\xe1 com o valor de 97)"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["Printamos utilizando ",(0,r.jsx)(e.code,{children:"content.i"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Isto nos faz utilizar ",(0,r.jsx)(e.strong,{children:"4"})," bytes (primeiro byte + os outros 3 bytes que n\xe3o foram limpos)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"Podemos confirmar isto settando para zero antes de preenchermos."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C",children:'content.c = \'a\';\n\nprintf("%i\\n", content.c); // print "97"\nprintf("%i\\n", content.i); // print "97"\n\ncontent.i = -10;\ncontent.i = 0;\ncontent.c = \'a\';\n\nprintf("%i\\n", content.c); // print "97"\nprintf("%i\\n", content.i); // print "97"\n'})}),"\n",(0,r.jsx)(e.p,{children:"Como podemos ver, \xe9 essencial termos uma maneira de identificar qual \xe9 o tipo atual na union."}),"\n",(0,r.jsx)(e.h1,{id:"enum",children:"Enum"}),"\n",(0,r.jsx)(e.p,{children:"Se trata de ligar um identificador a um n\xfamero \xfanico dentro de um agrupamento."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C",children:"enum Type {\n    Integer,\n    Floating,\n    Character,\n};\n\nenum Type type;\n"})}),"\n",(0,r.jsx)(e.p,{children:"Neste caso est\xe1 ligando:"}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Identificador"}),(0,r.jsx)(e.th,{children:"N\xfamero"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Integer"}),(0,r.jsx)(e.td,{children:"0"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Floating"}),(0,r.jsx)(e.td,{children:"1"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Character"}),(0,r.jsx)(e.td,{children:"2"})]})]})]}),"\n",(0,r.jsx)(e.p,{children:"Isto poupa trabalho de criarmos manualmente uma vari\xe1vel para cada valor, por exemplo:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C",children:"int Integer = 0;\nint Floating = 1;\nint Character = 2;\n"})}),"\n",(0,r.jsx)(e.p,{children:"Al\xe9m de deixarmos claro o tipo de vari\xe1vel durante a cria\xe7\xe3o dela (como um valor dentro daquele agrupamento)."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C",children:'enum Type type = Integer;\n\nprintf("%i\\n", type); // print "0"\n'})}),"\n",(0,r.jsx)(e.p,{children:"Enfim, a essa altura voc\xea pode j\xe1 ter notado a import\xe2ncia de enum para unions."}),"\n",(0,r.jsx)(e.p,{children:"Com eles podemos criar ligar um identificador a um tipo, como se fosse uma tag para aquele union."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C",children:"union content {\n    int i;\n    float f;\n    char c;\n} content;\n\nenum Types {\n    Integer,\n    Floating,\n    Character,\n} type;\n\ncontent.f = 5.0;\ntype = Floating;\n"})}),"\n",(0,r.jsxs)(e.p,{children:["Note que precisamos atualizar ",(0,r.jsx)(e.code,{children:"type"})," sempre que mudarmos o tipo de ",(0,r.jsx)(e.code,{children:"content"}),", por\xe9m ganhamos a capacidade de tratar corretamente a union."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C",children:'if (type == Floating) {\n    printf("%f\\n", content.f);\n} else if (type == Character) {\n    printf("%c\\n", content.c);\n} else {\n    printf("%i\\n", content.i);\n}\n'})}),"\n",(0,r.jsxs)(e.p,{children:["Este tipo de estrutura \xe9 t\xe3o comum que tem o nome de ",(0,r.jsx)(e.a,{href:"https://en.wikipedia.org/wiki/Tagged_union",children:"Tagged Union"}),"."]}),"\n",(0,r.jsx)(e.h1,{id:"rust-enum",children:"Rust Enum"}),"\n",(0,r.jsxs)(e.p,{children:["Acredito que o ",(0,r.jsx)(e.code,{children:"enum"})," do Rust seja nada mais que um tagged union."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-Rust",children:'#[derive(Debug)]\nenum Type {\n    Integer,\n    Floating,\n    Character,\n}\n\nprintln!("{:#?}", Type::Integer);\n'})}),"\n",(0,r.jsx)(e.p,{children:"Em outras lugares enum ligaria apenas identificadores a n\xfameros, por\xe9m em Rust voc\xea pode armazenar estrutura/tipos juntos aos enums."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-Rust",children:'#[derive(Debug)]\nenum Type {\n    Integer(i32),\n    Floating(f32),\n    Character(char),\n}\n\nlet content: Type = Type::Floating(5.0);\n\nprintln!("{:#?}", content);\n'})}),"\n",(0,r.jsx)(e.p,{children:"Isso nos da uma estrutura s\xf3 que possue a capacidade de fazer o mesmo que tagged union e com menos chance do desenvolvedor cometer um erro."}),"\n",(0,r.jsx)(e.p,{children:"Por exemplo, n\xe3o precisamos mais atualizar o tipo armazenado na vari\xe1vel toda vez que alteramos:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"// C\ncontent.f = 5.0;\ntype = Floating;\n\n// Rust\nlet content: Type = Type::Floating(5.0);\n"})}),"\n",(0,r.jsx)(e.p,{children:"Rust \xe9 linguagem que preza bastante seguran\xe7a, ent\xe3o faria sentido tratar como se fosse uma \xfanica estrutura para evitar os problemas de union (embora Rust tenha o tipo union)."}),"\n",(0,r.jsx)(e.h1,{id:"comparison",children:"Comparison"}),"\n",(0,r.jsx)(e.h3,{id:"c",children:"C"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-C",children:"union content {\n    int i;\n    float f;\n    char c;\n} content;\n\nenum Types {\n    Integer,\n    Floating,\n    Character,\n} type;\n\ncontent.f = 5.0;\ntype = Floating;\n\nif (type == Floating) {\n    // Fazer algo com float\n} else if (type == Character) {\n    // Fazer algo com char\n} else {\n    // Fazer algo com int\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"rust",children:"Rust"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-Rust",children:"#[derive(Debug)]\nenum Type {\n    Integer(i32),\n    Floating(f32),\n    Character(char),\n}\n\nlet content: Type = Type::Floating(5.0);\n\nmatch content {\n    Type::Floating(f) => // Fazer algo com float\n    Type::Character(c) => // Fazer algo com char\n    Type::Integer(i) => // Fazer algo com int\n}\n"})})]})}function u(n={}){const{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},11151:(n,e,t)=>{t.d(e,{Z:()=>s,a:()=>i});var r=t(67294);const a={},o=r.createContext(a);function i(n){const e=r.useContext(o);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:i(n.components),r.createElement(o.Provider,{value:e},n.children)}}}]);